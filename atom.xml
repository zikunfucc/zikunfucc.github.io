<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZiKunFuCc&#39;s Blogs</title>
  
  <subtitle>subtitle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zikunfu.cn/"/>
  <updated>2018-12-27T13:23:48.456Z</updated>
  <id>http://www.zikunfu.cn/</id>
  
  <author>
    <name>星河 || zikunfucc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebStorm主题修改以及插件配置</title>
    <link href="http://www.zikunfu.cn/post/e8975f07.html"/>
    <id>http://www.zikunfu.cn/post/e8975f07.html</id>
    <published>2018-12-27T12:10:30.000Z</published>
    <updated>2018-12-27T13:23:48.456Z</updated>
    
    <content type="html"><![CDATA[<h4 id="WebStorm主题修改"><a href="#WebStorm主题修改" class="headerlink" title="WebStorm主题修改"></a>WebStorm主题修改</h4><h5 id="已有主题修改"><a href="#已有主题修改" class="headerlink" title="已有主题修改:"></a>已有主题修改:</h5><p>在<strong>File-&gt;Settings-&gt;Color Scheme</strong>中可以选择已有的部分主题进行修改。</p><p><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fylklvci0bj30710j4q3g.jpg" alt=""></p><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fylklut7s9j30s40ir756.jpg" alt=""></p><h5 id="外部主题修改"><a href="#外部主题修改" class="headerlink" title="外部主题修改:"></a>外部主题修改:</h5><p><a href="http://color-themes.com/?view=index" target="_blank" rel="noopener"><strong>主题网站</strong></a><br>在网站中找到了自己喜欢的主题后，下载<strong>jar</strong>文件，然后在<strong>WebStorm</strong>中点击<strong>File-&gt;Import Settings</strong></p><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fylku4lqfej30710j4gm4.jpg" alt=""><br>选用刚才下载的<strong>jar</strong>文件，导入主题就哦了。</p><h4 id="WebStorm插件配置"><a href="#WebStorm插件配置" class="headerlink" title="WebStorm插件配置"></a>WebStorm插件配置</h4><h5 id="1-Material-Theme-UI"><a href="#1-Material-Theme-UI" class="headerlink" title="1.Material Theme UI"></a>1.Material Theme UI</h5><p>一个主题类的插件，可以修改界面颜色，代码颜色，文件图标什么的，感觉安装这个了之后比自己修改的主题方便多了，而且也蛮好看的。</p><p><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fyll5mg2jsj30s40ir407.jpg" alt=""></p><p><strong>效果:</strong></p><p><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fyll9uuuqjj310y0ib0wo.jpg" alt=""></p><h5 id="2-CodeGlance"><a href="#2-CodeGlance" class="headerlink" title="2.CodeGlance"></a>2.CodeGlance</h5><p>这个插件可以让WebStorm拥有右侧的代码缩略图，方便我们快速的滑动代码，类似于Sublime。</p><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyllfhpgnfj30s40irq48.jpg" alt=""></p><p><strong>效果:</strong></p><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyllh9ltxpj304305hglg.jpg" alt=""></p><h5 id="3-eslint"><a href="#3-eslint" class="headerlink" title="3.eslint"></a>3.eslint</h5><p>这个插件是语法检查的，剩下的不用多说了吧。</p><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fylljagrzcj30s40irwfr.jpg" alt=""></p><h5 id="4-activate-power-mode"><a href="#4-activate-power-mode" class="headerlink" title="4.activate-power-mode"></a>4.activate-power-mode</h5><p>安装之后可以在 window -&gt; activate-power-mode 中关闭震动以及开启彩色模式。</p><p><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fyllnvmemcj30s40ir0u2.jpg" alt=""></p><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyllnw0yc6j310y0ib41j.jpg" alt=""></p><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyllnwj8dxj305v04pmx2.jpg" alt=""><br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可用  <span class="keyword">enable</span><span class="comment">// 设置是否启用</span></span><br><span class="line">抖动  shake<span class="comment">// 设置是否抖动</span></span><br><span class="line">粒子  particle<span class="comment">// 设置是否有粒子飞溅</span></span><br><span class="line">组合  combo<span class="comment">// 设置是否输入多于一定数量才开始出现效果</span></span><br></pre></td></tr></table></figure></p><p><strong>注释:</strong><br>默认配置下，每次都得输入到多少个单词后才会有效果触发,还有一个非常讨厌的图标。</p><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fylludl4jmj306l049t8l.jpg" alt=""></p><p>我们在这个页面设置修改如下::<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyllnwj8dxj305v04pmx2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;WebStorm主题修改&quot;&gt;&lt;a href=&quot;#WebStorm主题修改&quot; class=&quot;headerlink&quot; title=&quot;WebStorm主题修改&quot;&gt;&lt;/a&gt;WebStorm主题修改&lt;/h4&gt;&lt;h5 id=&quot;已有主题修改&quot;&gt;&lt;a href=&quot;#已有主题修改&quot;
      
    
    </summary>
    
      <category term="软件推荐" scheme="http://www.zikunfu.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
    
      <category term="软件推荐" scheme="http://www.zikunfu.cn/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Android开发-炫酷计算器基本实现</title>
    <link href="http://www.zikunfu.cn/post/14b2e1c.html"/>
    <id>http://www.zikunfu.cn/post/14b2e1c.html</id>
    <published>2018-12-26T09:23:58.000Z</published>
    <updated>2018-12-26T12:22:20.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算器设计："><a href="#计算器设计：" class="headerlink" title="计算器设计："></a>计算器设计：</h3><p>设计一个能完成四则运算的计算器，要求拥有基本界面以及绑定响应事件。</p><h4 id="项目进度："><a href="#项目进度：" class="headerlink" title="项目进度："></a>项目进度：</h4><p>（1）：实现基本四则运算<br>（2）：实现基本的UI设计<br>（3）：实现回退，清空，清屏功能<br>（4）：实现正负数转换<br>（5）：实现小数点运算</p><h4 id="UI界面展示："><a href="#UI界面展示：" class="headerlink" title="UI界面展示："></a>UI界面展示：</h4><p><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fykcnr9araj309l0h2q3c.jpg" alt=""></p><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><p>详见<a href="https://github.com/zikunfucc/cool_calculator" target="_blank" rel="noopener">github</a></p><h4 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h4><h5 id="（1）将整个网格布局内的所有控件按所占网格比例分配屏幕宽度和屏幕高度："><a href="#（1）将整个网格布局内的所有控件按所占网格比例分配屏幕宽度和屏幕高度：" class="headerlink" title="（1）将整个网格布局内的所有控件按所占网格比例分配屏幕宽度和屏幕高度："></a>（1）将整个网格布局内的所有控件按所占网格比例分配屏幕宽度和屏幕高度：</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> GridLayout mGridLayout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columnCount; <span class="comment">// Grid列数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowCount;   <span class="comment">// Grid行数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> screenWidth; <span class="comment">// 屏幕宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> screenHeight; <span class="comment">// 屏幕高度</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mGridLayout = (GridLayout) findViewById(R.id.gridLayout);</span><br><span class="line">        columnCount = mGridLayout.getColumnCount();</span><br><span class="line">        rowCount = mGridLayout.getRowCount();</span><br><span class="line"></span><br><span class="line">        DisplayMetrics dm = <span class="keyword">this</span>.getResources().getDisplayMetrics();</span><br><span class="line">        <span class="keyword">int</span> screenWidth = ((DisplayMetrics) dm).widthPixels;</span><br><span class="line">        <span class="keyword">int</span> screenHeight = dm.heightPixels;</span><br><span class="line"><span class="comment">//        Log.e("debug1", "row: " + rowCount + "; column: " + columnCount + ";  screenwidth: " + screenWidth);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mGridLayout.getChildCount(); i++) &#123;</span><br><span class="line">            View view = mGridLayout.getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> Button) &#123;</span><br><span class="line">                Button button = (Button) view;</span><br><span class="line"><span class="comment">//                Log.d("debug1", "第" + i + "个view是button");</span></span><br><span class="line">                button.setWidth(screenWidth / columnCount);</span><br><span class="line">                button.setHeight(screenHeight / rowCount);</span><br><span class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(view <span class="keyword">instanceof</span> TextView)</span> </span>&#123;</span><br><span class="line">                TextView textview = (TextView) view;</span><br><span class="line"><span class="comment">//                Log.d("debug1", "第" + i + "个view是textview");</span></span><br><span class="line">                textview.setWidth(screenWidth);</span><br><span class="line">                textview.setHeight(screenHeight / rowCount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="（2）0按钮的点击响应事件："><a href="#（2）0按钮的点击响应事件：" class="headerlink" title="（2）0按钮的点击响应事件："></a>（2）0按钮的点击响应事件：</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zero_clicked</span>(<span class="params">View view</span>)</span> &#123;</span><br><span class="line">    TextView print2 = (TextView) findViewById(R.id.print2);</span><br><span class="line">    String s = print2.getText().toString();</span><br><span class="line">    <span class="keyword">if</span> (!s.<span class="keyword">equals</span>(<span class="string">"0"</span>)) &#123;   <span class="comment">// 如果print2中的值不是0的话，字符串后面加0</span></span><br><span class="line">        s = s + <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print2.setText(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）其他数字按钮点击响应事件"><a href="#（3）其他数字按钮点击响应事件" class="headerlink" title="（3）其他数字按钮点击响应事件:"></a>（3）其他数字按钮点击响应事件:</h5> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one_clicked</span>(<span class="params">View view</span>)</span> &#123;</span><br><span class="line">    TextView print2 = (TextView) findViewById(R.id.print2);</span><br><span class="line">    String s = print2.getText().toString();</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="keyword">equals</span>(<span class="string">"0"</span>)) &#123;    <span class="comment">// 如果print2文本框中的值为0的话，直接赋值为0</span></span><br><span class="line">        s = <span class="string">"1"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;        <span class="comment">// 如果print2文本框中的值不是0的话，字符串后面加1</span></span><br><span class="line">        s = s + <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print2.setText(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（4）CE-C-D按钮点击响应事件"><a href="#（4）CE-C-D按钮点击响应事件" class="headerlink" title="（4）CE,C,D按钮点击响应事件:"></a>（4）CE,C,D按钮点击响应事件:</h5> <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> public void ce_clicked(View view) &#123;</span><br><span class="line">    TextView print1 = (TextView) findViewById(R.id.print1)<span class="comment">;</span></span><br><span class="line">    TextView print2 = (TextView) findViewById(R.id.print2)<span class="comment">;</span></span><br><span class="line">    String <span class="built_in">s1</span> = <span class="string">""</span><span class="comment">;     // CE将print1文本框清空</span></span><br><span class="line">    String <span class="built_in">s2</span> = <span class="string">"0"</span><span class="comment">;    // CE将print2文本框赋值为0</span></span><br><span class="line">    print1.setText(<span class="built_in">s1</span>)<span class="comment">;</span></span><br><span class="line">    print2.setText(<span class="built_in">s2</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> CE清除两个文本框内容，C清除输入文本框内容，D回退一个输入字符，对应删除一部分上面CE代码即可。</p><h5 id="（5）小数点按钮点击响应事件"><a href="#（5）小数点按钮点击响应事件" class="headerlink" title="（5）小数点按钮点击响应事件:"></a>（5）小数点按钮点击响应事件:</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dot_clicked</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    TextView print2 = (TextView) findViewById(R.id.print2);</span><br><span class="line">    String s = print2.getText().toString();</span><br><span class="line">    <span class="keyword">if</span> (!s.contains(<span class="string">"."</span>)) &#123;     <span class="comment">// 如果print2输入字符串内没有小数点，就在尾部添加一个小数点</span></span><br><span class="line">        s = s + <span class="string">"."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    print2.setText(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（6）正负号按钮点击响应事件"><a href="#（6）正负号按钮点击响应事件" class="headerlink" title="（6）正负号按钮点击响应事件:"></a>（6）正负号按钮点击响应事件:</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">public</span> void zhengfu_clicked(View view) &#123;</span><br><span class="line">    TextView print1 = (TextView) findViewById(R.id.print1)<span class="comment">;</span></span><br><span class="line">    TextView print2 = (TextView) findViewById(R.id.print2)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">String </span><span class="built_in">s1</span> = print1.getText().toString()<span class="comment">;</span></span><br><span class="line">    <span class="keyword">String </span><span class="built_in">s2</span> = print2.getText().toString()<span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span>(!<span class="built_in">s1</span>.equals(<span class="string">""</span>) &amp;&amp; <span class="built_in">s2</span>.equals(<span class="string">"0"</span>) &amp;&amp; <span class="built_in">s1</span>.contains(<span class="string">"="</span>)) &#123;  // 之前计算完了一个式子，那么我们将结果的正负号修改</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s1</span>.<span class="keyword">substring(s1.lastIndexOf("=") </span>+ <span class="number">1</span>, <span class="built_in">s1</span>.length())<span class="comment">;</span></span><br><span class="line">        <span class="meta">if</span>(!<span class="built_in">s1</span>.startsWith(<span class="string">"-"</span>)) &#123;   // 如果=号右边数字，即结果为正数，则改为负数</span><br><span class="line">            <span class="built_in">s1</span> = <span class="string">"-"</span> + <span class="built_in">s1</span><span class="comment">;</span></span><br><span class="line">        &#125; <span class="meta">else</span>&#123;     // 如果结果为负数，则改为正数</span><br><span class="line">            <span class="built_in">s1</span> = <span class="built_in">s1</span>.<span class="keyword">substring(1, </span><span class="built_in">s1</span>.length())<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        print1.setText(<span class="built_in">s1</span>)<span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span>(!<span class="built_in">s1</span>.equals(<span class="string">""</span>) &amp;&amp; <span class="built_in">s2</span>.equals(<span class="string">"0"</span>) &amp;&amp; !<span class="built_in">s1</span>.contains(<span class="string">"+"</span>) &amp;&amp; !<span class="built_in">s1</span>.contains(<span class="string">"−"</span>) &amp;&amp; !<span class="built_in">s1</span>.contains(<span class="string">"×"</span>) &amp;&amp; !<span class="built_in">s1</span>.contains(<span class="string">"÷"</span>)) &#123;</span><br><span class="line">        // 如果print1文本框内的字符串为一个数字，那么我们将该数字的正负颠倒</span><br><span class="line">        <span class="meta">if</span>(!<span class="built_in">s1</span>.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            <span class="built_in">s1</span> = <span class="string">"-"</span> + <span class="built_in">s1</span><span class="comment">;</span></span><br><span class="line">        &#125; <span class="meta">else</span>&#123;</span><br><span class="line">            <span class="built_in">s1</span> = <span class="built_in">s1</span>.<span class="keyword">substring(1, </span><span class="built_in">s1</span>.length())<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        print1.setText(<span class="built_in">s1</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">else</span> <span class="meta">if</span>(!<span class="built_in">s2</span>.equals(<span class="string">"0"</span>)) &#123;      // 如果print2文本框内容不为<span class="number">0</span>，那么我们将该字符串正负颠倒</span><br><span class="line">        <span class="meta">if</span>(!<span class="built_in">s2</span>.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            <span class="built_in">s2</span> = <span class="string">"-"</span> + <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">        &#125; <span class="meta">else</span> &#123;</span><br><span class="line">            <span class="built_in">s2</span> = <span class="built_in">s2</span>.<span class="keyword">substring(1, </span><span class="built_in">s2</span>.length())<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        print2.setText(<span class="built_in">s2</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（7）四则运算点击响应事件"><a href="#（7）四则运算点击响应事件" class="headerlink" title="（7）四则运算点击响应事件:"></a>（7）四则运算点击响应事件:</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">public</span> void <span class="keyword">add_clicked(View </span>view) &#123;</span><br><span class="line">    TextView print1 = (TextView) findViewById(R.id.print1)<span class="comment">;</span></span><br><span class="line">    TextView print2 = (TextView) findViewById(R.id.print2)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">String </span><span class="built_in">s1</span> = print1.getText().toString()<span class="comment">;</span></span><br><span class="line">    <span class="keyword">String </span><span class="built_in">s2</span> = print2.getText().toString()<span class="comment">;</span></span><br><span class="line">    <span class="built_in">s2</span> = <span class="built_in">s2</span> + <span class="string">"+"</span><span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span>(<span class="built_in">s1</span>.equals(<span class="string">""</span>)) &#123;     // 必须放在第三个判断之前，否则会异常</span><br><span class="line">        // 如果print1文本框为空，那么直接赋值为print2文本框内容加上+</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span> (<span class="built_in">s2</span>.equals(<span class="string">"0"</span>)) &#123;    // 如果print2文本框为空，那么直接print1文本框内容加上+</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s1</span> + <span class="string">"+"</span><span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span> (!Character.isDigit(<span class="built_in">s1</span>.charAt(<span class="built_in">s1</span>.length() - <span class="number">1</span>))) &#123;    // 如果print1文本框内容最后一个字符</span><br><span class="line">        // 不是数字，而是运算符，那么print1内容加上print2内容再加上+</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s1</span> + <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span>(<span class="built_in">s1</span>.contains(<span class="string">"="</span>) &amp;&amp; <span class="built_in">s2</span>.equals(<span class="string">"0+"</span>)) &#123;    // 如果print1文本框内容还有=号，且</span><br><span class="line">        // print2文本框是<span class="number">0</span>，那么print1文本框内容变为结果数字加上+</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s1</span>.<span class="keyword">substring(s1.lastIndexOf("=") </span>+ <span class="number">1</span>, <span class="built_in">s1</span>.length())<span class="comment">;</span></span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s1</span> + <span class="string">"+"</span><span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span>(!<span class="built_in">s1</span>.equals(<span class="string">""</span>) &amp;&amp; <span class="built_in">s2</span>.equals(<span class="string">"0+"</span>)) &#123;      // 如果print1文本框内容不为空，print2</span><br><span class="line">        // 内容为<span class="number">0</span>，且最后一位不是运算符，那么print1内容加上+</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s1</span> + <span class="string">"+"</span><span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> &#123;    // 若不为以上情况，则print1内容为print2内容加上+</span><br><span class="line">        <span class="built_in">s1</span> = <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    print1.setText(<span class="built_in">s1</span>)<span class="comment">;</span></span><br><span class="line">    print2.setText(<span class="string">"0"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（8）-号点击响应事件："><a href="#（8）-号点击响应事件：" class="headerlink" title="（8）=号点击响应事件："></a>（8）=号点击响应事件：</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    public void equals_clicked(View view) &#123;</span><br><span class="line">        TextView print1 = (TextView) findViewById(R.id.print1)<span class="comment">;</span></span><br><span class="line">        TextView print2 = (TextView) findViewById(R.id.print2)<span class="comment">;</span></span><br><span class="line">        <span class="keyword">String </span><span class="built_in">s1</span> = print1.getText().toString()<span class="comment">;</span></span><br><span class="line">        <span class="keyword">String </span><span class="built_in">s2</span> = print2.getText().toString()<span class="comment">;</span></span><br><span class="line">        <span class="meta">if</span> (<span class="built_in">s1</span>.equals(<span class="string">""</span>)) &#123;    // 如果print1内容为空，那么print1内容赋值为print2内容</span><br><span class="line">            <span class="built_in">s1</span> = <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">        &#125; <span class="meta">else</span> <span class="meta">if</span> (Character.isDigit(<span class="built_in">s1</span>.charAt(<span class="built_in">s1</span>.length() - <span class="number">1</span>))) &#123;     // 如果最后一位为数字，</span><br><span class="line">            // 那么也赋值为print2内容</span><br><span class="line">            <span class="built_in">s1</span> = <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">        &#125; <span class="meta">else</span> &#123;    // 否则进行计算，得到结果</span><br><span class="line">            <span class="keyword">String </span>result = simple_calculate(<span class="built_in">s1</span> + <span class="built_in">s2</span>)<span class="comment">;</span></span><br><span class="line">            <span class="meta">if</span>(result.equals(<span class="string">"不能除0"</span>)) &#123; </span><br><span class="line">                <span class="built_in">s1</span> = result<span class="comment">;</span></span><br><span class="line">            &#125; <span class="meta">else</span> &#123;</span><br><span class="line">                <span class="built_in">s1</span> = <span class="built_in">s1</span> + <span class="built_in">s2</span> + <span class="string">"="</span> + result<span class="comment">;</span></span><br><span class="line">//               <span class="built_in">s1</span> = simple_calculate(<span class="built_in">s1</span> + <span class="built_in">s2</span>)<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print1.setText(<span class="built_in">s1</span>)<span class="comment">;</span></span><br><span class="line">        print2.setText(<span class="string">"0"</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>计算方法：</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> simple_calculate(<span class="keyword">String</span> s) &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 作用：保存算式中所有的运算符,并且保存每个运算符对应左右两个数字在arraayList中的索引</span></span><br><span class="line">        LinkedList&lt;Node&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Node&gt;(); </span><br><span class="line">        <span class="comment">// 作用：保存算式中所有的数字，后面进行动态修改</span></span><br><span class="line">        LinkedList&lt;<span class="keyword">String</span>&gt; arrayList = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">String</span>&gt;();   </span><br><span class="line">        <span class="comment">// 遍历字符串，判断当前是否是运算符，若是则将上一个运算符到当前运算符中间内容，即数字保存</span></span><br><span class="line">        <span class="comment">// 在arrayList中，将运算符与前后两个数值在arrayList中的索引，以及运算符对应</span></span><br><span class="line">        <span class="comment">// 优先级保存在LinkedList中。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'+'</span>) &#123;</span><br><span class="line">                Node node = <span class="keyword">new</span> Node(<span class="number">1</span>, <span class="number">1</span>, arrayList.<span class="built_in">size</span>(), arrayList.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">String</span> subString = s.substring(temp, i);</span><br><span class="line">                arrayList.<span class="built_in">add</span>(subString);</span><br><span class="line">                linkedList.<span class="built_in">add</span>(node);</span><br><span class="line">                temp = i + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'−'</span>) &#123;</span><br><span class="line">                Node node = <span class="keyword">new</span> Node(<span class="number">2</span>, <span class="number">1</span>, arrayList.<span class="built_in">size</span>(), arrayList.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">String</span> subString = s.substring(temp, i);</span><br><span class="line">                arrayList.<span class="built_in">add</span>(subString);</span><br><span class="line">                linkedList.<span class="built_in">add</span>(node);</span><br><span class="line">                temp = i + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'×'</span>) &#123;</span><br><span class="line">                Node node = <span class="keyword">new</span> Node(<span class="number">3</span>, <span class="number">2</span>, arrayList.<span class="built_in">size</span>(), arrayList.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">String</span> subString = s.substring(temp, i);</span><br><span class="line">                arrayList.<span class="built_in">add</span>(subString);</span><br><span class="line">                linkedList.<span class="built_in">add</span>(node);</span><br><span class="line">                temp = i + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'÷'</span>) &#123;</span><br><span class="line">                Node node = <span class="keyword">new</span> Node(<span class="number">4</span>, <span class="number">2</span>, arrayList.<span class="built_in">size</span>(), arrayList.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">String</span> subString = s.substring(temp, i);</span><br><span class="line">                arrayList.<span class="built_in">add</span>(subString);</span><br><span class="line">                linkedList.<span class="built_in">add</span>(node);</span><br><span class="line">                temp = i + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">String</span> subString = s.substring(temp, s.length());</span><br><span class="line">                arrayList.<span class="built_in">add</span>(subString);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.<span class="built_in">sort</span>(linkedList, <span class="keyword">new</span> NodeCompare());    <span class="comment">// 对于整个式子的运算符进行优先级排序</span></span><br><span class="line">        <span class="comment">// 按照排序后的运算符进行计算，key为1，2，3，4分别代表加减乘除</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; linkedList.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            Node item = linkedList.<span class="built_in">get</span>(i);</span><br><span class="line">            BigDecimal left_value = <span class="keyword">new</span> BigDecimal(arrayList.<span class="built_in">get</span>(item.left_index));</span><br><span class="line">            BigDecimal right_value = <span class="keyword">new</span> BigDecimal(arrayList.<span class="built_in">get</span>(item.right_index));</span><br><span class="line">            BigDecimal result = <span class="keyword">new</span> BigDecimal(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">if</span>(item.<span class="built_in">key</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                result = left_value.<span class="built_in">add</span>(right_value);</span><br><span class="line"><span class="comment">//                result = result.setScale(4, BigDecimal.ROUND_HALF_UP);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="built_in">key</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                result = left_value.subtract(right_value);</span><br><span class="line"><span class="comment">//                result = result.setScale(4, BigDecimal.ROUND_HALF_UP);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="built_in">key</span> == <span class="number">3</span>) &#123;</span><br><span class="line">                result = left_value.multiply(right_value);</span><br><span class="line"><span class="comment">//                result = result.setScale(4, BigDecimal.ROUND_HALF_UP);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="built_in">key</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arrayList.<span class="built_in">get</span>(item.right_index).equals(<span class="string">"0"</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"不能除0"</span>;</span><br><span class="line">                 result = left_value.divide(right_value, BigDecimal.ROUND_HALF_UP);</span><br><span class="line"><span class="comment">//                result = result.setScale(4, BigDecimal.ROUND_HALF_UP);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将计算结果赋值给运算符左边的数字，并且删除运算符右边的数字</span></span><br><span class="line">            arrayList.<span class="built_in">set</span>(item.left_index, result.toString());</span><br><span class="line">            arrayList.remove(item.right_index);</span><br><span class="line">            <span class="comment">// 调整整个linkedList内结点的左右数字的索引</span></span><br><span class="line">            adjustLink(item.left_index, linkedList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>调整方法：</strong><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将处理完的运算符后面的所有运算符对应的左右数字的索引-1</span></span><br><span class="line"><span class="comment">// 目的是让两个链表动态调整为第一次运算的形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> adjustLink(<span class="keyword">int</span> <span class="keyword">index</span>, LinkedList&lt;Node&gt; linkedList) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">        Node item = linkedList.get(i);</span><br><span class="line">        <span class="keyword">if</span>(item.left_index &gt; <span class="keyword">index</span>) &#123;</span><br><span class="line">            item.setLeft_index(item.left_index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(item.right_index &gt;<span class="keyword">index</span>) &#123;</span><br><span class="line">            item.setRight_index(item.right_index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        linkedList.set(i, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>运算符的结点类：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;   <span class="comment">// 优先级</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> key;     <span class="comment">// 加减乘除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> left_index;      <span class="comment">// 左边数字的索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> right_index;     <span class="comment">// 右边数字的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">        value = <span class="number">0</span>;</span><br><span class="line">        left_index = <span class="number">0</span>;</span><br><span class="line">        right_index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> Key, <span class="keyword">int</span> Value, <span class="keyword">int</span> Left_index, <span class="keyword">int</span> Right_index)</span> </span>&#123;</span><br><span class="line">        key = Key;</span><br><span class="line">        value = Value;</span><br><span class="line">        left_index = Left_index;</span><br><span class="line">        right_index = Right_index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft_index</span><span class="params">(<span class="keyword">int</span> left_index)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">this</span>.left_index = left_index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight_index</span><span class="params">(<span class="keyword">int</span> right_index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.right_index = right_index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承Comparator接口，重写自定义compare方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Node</span>&gt; </span>&#123;     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node n1, Node n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n1.value &gt; n2.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n1.value &lt; n2.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算器设计：&quot;&gt;&lt;a href=&quot;#计算器设计：&quot; class=&quot;headerlink&quot; title=&quot;计算器设计：&quot;&gt;&lt;/a&gt;计算器设计：&lt;/h3&gt;&lt;p&gt;设计一个能完成四则运算的计算器，要求拥有基本界面以及绑定响应事件。&lt;/p&gt;
&lt;h4 id=&quot;项目进度：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Android开发" scheme="http://www.zikunfu.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Android" scheme="http://www.zikunfu.cn/tags/Android/"/>
    
      <category term="项目设计" scheme="http://www.zikunfu.cn/tags/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-Collections.sort()实现集合自定义排排序</title>
    <link href="http://www.zikunfu.cn/post/750f4e3.html"/>
    <id>http://www.zikunfu.cn/post/750f4e3.html</id>
    <published>2018-12-25T15:48:02.000Z</published>
    <updated>2018-12-25T15:58:52.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Collections-sort"><a href="#Collections-sort" class="headerlink" title="Collections.sort()"></a>Collections.sort()</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h4><p>在日常开发中，很多时候都需要对一些数据进行排序的操作。然而那些数据一般都是放在一个集合中如：<strong>Map ，Set ，List</strong>等集合中。他们都提共了一个排序方法 sort()，要对数据排序直接使用这个方法就行，但是要保证集合中的对象是可比较的。但是如果我们存放在这些集合中的元素不是基本数据类型，比如说是我们自己写的一个类对象，那么自然的无法直接调用<strong>sort（）</strong>来进行排序。那么我们这个时候就需要重写<strong>compare（）</strong>方法。</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><h5 id="自定义的Node类"><a href="#自定义的Node类" class="headerlink" title="自定义的Node类"></a>自定义的Node类</h5><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Node &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> key;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">value</span>;</span><br><span class="line">    <span class="keyword">public</span> Node() &#123;</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node(<span class="built_in">int</span> Key) &#123;</span><br><span class="line">        key = Key;</span><br><span class="line">        <span class="keyword">value</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node(<span class="built_in">int</span> Key, <span class="built_in">int</span> <span class="keyword">Value</span>) &#123;</span><br><span class="line">        key = Key;</span><br><span class="line">        <span class="keyword">value</span> = <span class="keyword">Value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NodeCompare implements Comparator&lt;Node&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> compare(Node n1, Node n2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n1.<span class="keyword">value</span> &gt; n2.<span class="keyword">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n1.<span class="keyword">value</span> &lt; n2.<span class="keyword">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在这个Node类中设置了两个成员变量<strong>key和value</strong>，后面我们就根据<strong>value</strong>来进行排序。并且我们重写了<strong>compare（）</strong>方法，来达到我们自定义排序方法的目的。</p><h5 id="测试Sort类"><a href="#测试Sort类" class="headerlink" title="测试Sort类"></a>测试Sort类</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Formatter;</span><br><span class="line">import java.util.LinkedList;</span><br><span class="line"></span><br><span class="line">public class sort &#123;</span><br><span class="line">    public static void main(<span class="keyword">String</span> args[]) &#123;</span><br><span class="line">        LinkedList<span class="tag">&lt;Node&gt;</span> linkedList = new LinkedList<span class="tag">&lt;Node&gt;</span>();</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">n1</span> = new <span class="keyword">Node</span><span class="title">(1</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">n2</span> = new <span class="keyword">Node</span><span class="title">(2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">n3</span> = new <span class="keyword">Node</span><span class="title">(3</span>, <span class="number">1</span>);</span><br><span class="line">        linkedList.addLast(n1);</span><br><span class="line">        linkedList.addLast(n2);</span><br><span class="line">        linkedList.addLast(n3);</span><br><span class="line">        System.out.println(<span class="string">"根据次数排序前:"</span>);</span><br><span class="line">        printNodeList(linkedList);</span><br><span class="line">        Collections.sort(linkedList, new NodeCompare());</span><br><span class="line">        System.out.println(<span class="string">"根据次数排序后:"</span>);</span><br><span class="line">        printNodeList(linkedList);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void printNodeList(LinkedList<span class="tag">&lt;Node&gt;</span> linkedList) &#123;</span><br><span class="line">        Formatter formatter = new Formatter(System.out);</span><br><span class="line">        <span class="keyword">String</span> s = <span class="string">"链表:"</span>;</span><br><span class="line">        formatter.format(<span class="string">"%-8s"</span>, s);</span><br><span class="line">        for(<span class="keyword">Node</span> item:<span class="title"> linkedList</span>) &#123;</span><br><span class="line">            formatter.format(<span class="string">"%-5d"</span>, item.key);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        s = <span class="string">"次数:"</span>;</span><br><span class="line">        formatter.format(<span class="string">"%-8s"</span>, s);</span><br><span class="line">        for(<span class="keyword">Node</span> <span class="title">item</span> : linkedList) &#123;</span><br><span class="line">            formatter.format(<span class="string">"%-5d"</span>, item.value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果:"></a>测试效果:</h4><p><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fyjfmlykpsj307z04j748.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Collections-sort&quot;&gt;&lt;a href=&quot;#Collections-sort&quot; class=&quot;headerlink&quot; title=&quot;Collections.sort()&quot;&gt;&lt;/a&gt;Collections.sort()&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java开发" scheme="http://www.zikunfu.cn/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.zikunfu.cn/tags/Java/"/>
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>操作系统OS-四种页面置换算法的Java实现</title>
    <link href="http://www.zikunfu.cn/post/746efcbd.html"/>
    <id>http://www.zikunfu.cn/post/746efcbd.html</id>
    <published>2018-12-25T14:48:57.000Z</published>
    <updated>2018-12-25T15:38:22.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><h4 id="实验方法"><a href="#实验方法" class="headerlink" title="实验方法:"></a>实验方法:</h4><p>本示例是采用页式分配存储管理方案，并通过分析计算不同页面淘汰算法情况下的访问命中率来比较各种 算法的优劣。另外也考虑到改变页面大小和实际存储器容量对计算结果的影响，从而可为算则好的算法、合适的页 面尺寸和实存容量提供依据。 本程序是按下述原则生成指令序列的：<br>（1） 50%的指令是顺序执行的。<br>（2） 25%的指令均匀散布在前地址部分。<br>（3） 25%的指令均匀散布在后地址部分。<br>示例中选用最佳淘汰算法（OPT）和最近最少使用页面淘汰算法（LRU）计算页面命中率。公式为<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyjeia14zrj307g023wee.jpg" alt=""><br>假定虚存容量为 32K，页面尺寸从 1K 至 8K，实存容量从 4 页至 32 页</p><h4 id="地址流初始化"><a href="#地址流初始化" class="headerlink" title="地址流初始化"></a>地址流初始化</h4><p><strong>要求:</strong><br>本程序是按下述原则生成指令序列的：<br>（1） 50%的指令是顺序执行的。<br>（2） 25%的指令均匀散布在前地址部分。<br>（3） 25%的指令均匀散布在后地址部分。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> init(<span class="keyword">int</span> p, <span class="keyword">int</span> [] address) &#123;</span><br><span class="line">       Formatter formatter = <span class="keyword">new</span> Formatter(System.out);</span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="string">"The Virtual Address Stream As Follows:"</span>);</span><br><span class="line">       <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">           <span class="built_in">if</span> (i &lt; <span class="number">128</span>) &#123;</span><br><span class="line">               address[i] = <span class="number">16895</span> + i;</span><br><span class="line">           &#125; <span class="built_in">else</span> <span class="built_in">if</span> (i &lt; <span class="number">192</span>) &#123;</span><br><span class="line">               address[i] = (<span class="keyword">int</span>) (Math.<span class="built_in">random</span>() * <span class="number">15873</span>);</span><br><span class="line">           &#125; <span class="built_in">else</span> &#123;</span><br><span class="line">               address[i] = (<span class="keyword">int</span>) (Math.<span class="built_in">random</span>() * <span class="number">15873</span>) + <span class="number">15873</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       printArray(p, address);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="最佳淘汰算法-OPT"><a href="#最佳淘汰算法-OPT" class="headerlink" title="最佳淘汰算法(OPT):"></a>最佳淘汰算法(OPT):</h4><p>这是一种理想的算法，可用来作为衡量其他算法优劣的依据，在实际系统中是难以实现的，因为它必须先知道指令的全部地址流。由于本示例中已预先生成了全部的指令地址流，故可计算出最佳命中率。 该算法的准则是淘汰已满页表中不再访问或是最迟访问的页。这就要求将页表中的页逐个与后继指令访问的所有 页比较，如后继指令不在访问该页，则把此页淘汰，不然得找出后继指令中最迟访问的页面淘汰。可见最佳淘汰算法要花费较长的运算时间。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> OPT(<span class="keyword">int</span> m, <span class="keyword">int</span> p, <span class="keyword">int</span> [] pageno) &#123;</span><br><span class="line">        <span class="keyword">int</span> [] temp = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">int</span> [] <span class="keyword">index</span> = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> flag1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            temp[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(i + ": " + Arrays.toString(temp) + " " + num);</span></span><br><span class="line">            flag1 =  <span class="number">0</span>;</span><br><span class="line">            maxindex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">index</span>[j] = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp[j] == pageno[i]) &#123;</span><br><span class="line">                    flag1 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    temp[j] = pageno[i];</span><br><span class="line">                    num++;</span><br><span class="line">                    flag1 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag1 == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; p; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(pageno[k] == temp[j]) &#123;</span><br><span class="line">                            <span class="keyword">index</span>[j] = k;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> max = <span class="keyword">index</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">index</span>[j] == p) &#123;</span><br><span class="line">                        maxindex = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">index</span>[j] &gt; max) &#123;</span><br><span class="line">                        maxindex = j;</span><br><span class="line">                        max = <span class="keyword">index</span>[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(index));</span></span><br><span class="line">                temp[maxindex] = pageno[i];</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(num);</span></span><br><span class="line">        <span class="keyword">double</span> rate;</span><br></pre></td></tr></table></figure></p><h4 id="最近最少使用页淘汰算法-LRU"><a href="#最近最少使用页淘汰算法-LRU" class="headerlink" title="最近最少使用页淘汰算法(LRU):"></a>最近最少使用页淘汰算法(LRU):</h4><p>这是一种经常使用的方法，有各种不同的实施方案，这里采用的是不断调整页表链的方法，即总是淘汰页表链链首的页，而把新访问的页插入链尾。如果当前调用页已在页表内，则把它再次调整到链尾。这样就能保证最近使用的 页，总是处于靠近链尾部分，而不常使用的页就移到链首，逐个被淘汰，在页表较大时，调整页表链的代价也是不小的。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> LRU(<span class="keyword">int</span> m, <span class="keyword">int</span> p, <span class="keyword">int</span> [] pageno) &#123;</span><br><span class="line">        LinkedList linkList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p; i++) &#123;</span><br><span class="line">            <span class="built_in">if</span>(linkList.<span class="built_in">size</span>() &lt; m &amp;&amp; !linkList.contains(pageno[i])) &#123;</span><br><span class="line">                linkList.addLast(pageno[i]);</span><br><span class="line">                num++;</span><br><span class="line">            &#125; <span class="built_in">else</span> <span class="built_in">if</span>(linkList.<span class="built_in">size</span>() == m &amp;&amp; !linkList.contains(pageno[i])) &#123;</span><br><span class="line">                linkList.removeFirst();</span><br><span class="line">                linkList.addLast(pageno[i]);</span><br><span class="line">                num++;</span><br><span class="line">            &#125; <span class="built_in">else</span> <span class="built_in">if</span>(linkList.contains(pageno[i])) &#123;</span><br><span class="line">                linkList.<span class="built_in">remove</span>(pageno[i]);</span><br><span class="line">                linkList.addLast(pageno[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> rate;</span><br><span class="line">        rate = <span class="number">1</span> - ((<span class="keyword">double</span>)num)/p;</span><br><span class="line"><span class="comment">//        System.out.println(rate);</span></span><br><span class="line">        <span class="built_in">return</span> rate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="先入先出算法-FIFO"><a href="#先入先出算法-FIFO" class="headerlink" title="先入先出算法(FIFO):"></a>先入先出算法(FIFO):</h4><p>优先淘汰最早进入内存的页面，亦即在内存中驻留时间最久的页面。该算法实现简单，只需把调入内存的页面根据先后次序链接成队列，设置一个指针总指向最早的页面。但该算法与进程实际运行时的规律不适应，因为在进程中，有的页面经常被访问。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    public <span class="keyword">static</span> <span class="built_in">double</span> FIFO(<span class="built_in">int</span> m, <span class="built_in">int</span> p, <span class="built_in">int</span> [] pageno) &#123;</span><br><span class="line">        LinkedList linkList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; p; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(linkList.size() &lt; m &amp;&amp; !linkList.contains(pageno[i])) &#123;</span><br><span class="line">                linkList.addLast(pageno[i]);</span><br><span class="line">                <span class="built_in">num</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(linkList.size() == m &amp;&amp; !linkList.contains(pageno[i])) &#123;</span><br><span class="line">                linkList.removeFirst();</span><br><span class="line">                linkList.addLast(pageno[i]);</span><br><span class="line">                <span class="built_in">num</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">double</span> rate;</span><br><span class="line">        rate = <span class="number">1</span> - ((<span class="built_in">double</span>)<span class="built_in">num</span>)/p;</span><br><span class="line"><span class="comment">//        System.out.println(rate);</span></span><br><span class="line">        <span class="keyword">return</span> rate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="最近最不常用使用算法-LFU"><a href="#最近最不常用使用算法-LFU" class="headerlink" title="最近最不常用使用算法(LFU):"></a>最近最不常用使用算法(LFU):</h4><p>即最不经常使用页置换算法，要求在页置换时置换引用计数最小的页，因为经常使用的页应该有一个较大的引用次数。但是有些页在开始时使用次数很多，但以后就不再使用，这类页将会长时间留在内存中，因此可以将引用计数寄存器定时右移一位，形成指数衰减的平均使用次数。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> LFU(<span class="keyword">int</span> m, <span class="keyword">int</span> p, <span class="keyword">int</span> [] pageno) &#123;</span><br><span class="line">        LinkedList&lt;Node&gt; linkList = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p; i++) &#123;</span><br><span class="line"><span class="comment">//            printNodeList(linkList);</span></span><br><span class="line"><span class="comment">//            System.out.println("添加元素: " + pageno[i]);</span></span><br><span class="line">            <span class="built_in">if</span>(linkList.<span class="built_in">size</span>() &lt; m &amp;&amp; !contains(linkList, pageno[i])) &#123;</span><br><span class="line">                Node node = <span class="keyword">new</span> Node(pageno[i]);</span><br><span class="line">                linkList.addLast(node);</span><br><span class="line">                num++;</span><br><span class="line">            &#125; <span class="built_in">else</span> <span class="built_in">if</span>(linkList.<span class="built_in">size</span>() == m &amp;&amp; !contains(linkList, pageno[i])) &#123;</span><br><span class="line">                Node node = <span class="keyword">new</span> Node(pageno[i]);</span><br><span class="line">                linkList.removeFirst();</span><br><span class="line">                linkList.addLast(node);</span><br><span class="line">                num++;</span><br><span class="line">            &#125; <span class="built_in">else</span> <span class="built_in">if</span>(contains(linkList, pageno[i])) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                index = <span class="built_in">find</span>(linkList, pageno[i]);</span><br><span class="line">                Node node = linkList.<span class="built_in">get</span>(index);</span><br><span class="line">                node.value++;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.sort(linkList, <span class="keyword">new</span> NodeCompare());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> rate;</span><br><span class="line">        rate = <span class="number">1</span> - ((<span class="keyword">double</span>)num)/p;</span><br><span class="line"><span class="comment">//        System.out.println(rate);</span></span><br><span class="line">        <span class="built_in">return</span> rate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="实验截图"><a href="#实验截图" class="headerlink" title="实验截图:"></a>实验截图:</h4><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyjeygahwwj30ef0cx74n.jpg" alt=""></p><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码:"></a>具体代码:</h4><p>详见<a href="https://github.com/zikunfucc/OPT_LRU_FIFO_LFU" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;页面置换算法&quot;&gt;&lt;a href=&quot;#页面置换算法&quot; class=&quot;headerlink&quot; title=&quot;页面置换算法&quot;&gt;&lt;/a&gt;页面置换算法&lt;/h3&gt;&lt;h4 id=&quot;实验方法&quot;&gt;&lt;a href=&quot;#实验方法&quot; class=&quot;headerlink&quot; title=&quot;实
      
    
    </summary>
    
      <category term="操作系统" scheme="http://www.zikunfu.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Java" scheme="http://www.zikunfu.cn/tags/Java/"/>
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="操作系统" scheme="http://www.zikunfu.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android开发(2)-事件绑定与布局设计</title>
    <link href="http://www.zikunfu.cn/post/9d417d59.html"/>
    <id>http://www.zikunfu.cn/post/9d417d59.html</id>
    <published>2018-12-24T16:06:10.000Z</published>
    <updated>2018-12-25T11:59:18.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一:"></a>实验一:</h3><h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求:"></a>实验要求:</h4><p>编程实现如图 1 所示功能，即单击按钮，在文本编辑框中输入的文字内容将<br>显示到文本标签中。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyiae46hiuj30cb09i74e.jpg" alt=""></p><h4 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码:"></a>实验代码:</h4><p>具体代码详见<a href="https://github.com/zikunfucc/android_experiment1" target="_blank" rel="noopener">github</a>。</p><h4 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h4><p><img src="http://wx1.sinaimg.cn/small/006zoO1wgy1fyianglxa4j30u01hc3zl.jpg" alt=""><br><img src="http://wx3.sinaimg.cn/small/006zoO1wgy1fyianh8iwwj30u01hcwfq.jpg" alt=""></p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二:"></a>实验二:</h3><h4 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求:"></a>实验要求:</h4><p>设计一个加法计算器，如图 2 所示，在前两个文本编辑框中输入证书，单击<br>“=”按钮时，在第 3 个文本编辑框中显示这两个数之和。<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fyiaqc57imj307g0303yf.jpg" alt=""></p><h4 id="实验代码-1"><a href="#实验代码-1" class="headerlink" title="实验代码:"></a>实验代码:</h4><p>具体代码详见<a href="https://github.com/zikunfucc/easy_add_example" target="_blank" rel="noopener">github</a></p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果:"></a>实验结果:</h4><p><img src="http://wx2.sinaimg.cn/small/006zoO1wgy1fyianhooa0j30u01hcdgl.jpg" alt=""></p><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三:"></a>实验三:</h3><h4 id="实验要求-2"><a href="#实验要求-2" class="headerlink" title="实验要求:"></a>实验要求:</h4><p>设计如图 3 所示的用户界面布局。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fyiaqcj5e9j30be0aejrp.jpg" alt=""></p><h4 id="实验代码-2"><a href="#实验代码-2" class="headerlink" title="实验代码:"></a>实验代码:</h4><p>具体代码详见<a href="https://github.com/zikunfucc/easy_laout" target="_blank" rel="noopener">github</a></p><h4 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果:"></a>实验结果:</h4><p><img src="http://wx3.sinaimg.cn/small/006zoO1wgy1fyj8oem88ij30u01hcwgg.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实验一&quot;&gt;&lt;a href=&quot;#实验一&quot; class=&quot;headerlink&quot; title=&quot;实验一:&quot;&gt;&lt;/a&gt;实验一:&lt;/h3&gt;&lt;h4 id=&quot;实验要求&quot;&gt;&lt;a href=&quot;#实验要求&quot; class=&quot;headerlink&quot; title=&quot;实验要求:&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Android开发" scheme="http://www.zikunfu.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Android" scheme="http://www.zikunfu.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-LinkedList使用介绍</title>
    <link href="http://www.zikunfu.cn/post/d3734e81.html"/>
    <id>http://www.zikunfu.cn/post/d3734e81.html</id>
    <published>2018-12-22T09:25:02.000Z</published>
    <updated>2018-12-23T12:43:48.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LinkedList使用介绍"><a href="#LinkedList使用介绍" class="headerlink" title="LinkedList使用介绍"></a>LinkedList使用介绍</h3><p>LinkedList继承于<strong>AbstractSequentialList</strong>，它可以当作一个堆栈、队列或者双端队列来使用,实际上它的实现是一个双向链表。既然是双向链表，那么它的顺序访问会非常高效，而随机访问效率比较低。<br>借用网上dalao们总结的一张表格来看看大致的一些函数返回值与异常问题：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        第一个元素（头部）                 最后一个元素（尾部）</span><br><span class="line">        抛出异常        特殊值            抛出异常        特殊值</span><br><span class="line">插入    addFirst<span class="comment">(e)</span>    offerFirst<span class="comment">(e)</span>    addLast<span class="comment">(e)</span>       offerLast<span class="comment">(e)</span></span><br><span class="line">移除    removeFirst<span class="comment">()</span>  pollFirst<span class="comment">()</span>      removeLast<span class="comment">()</span>     pollLast<span class="comment">()</span></span><br><span class="line">检查    getFirst<span class="comment">()</span>     peekFirst<span class="comment">()</span>      getLast<span class="comment">()</span>        peekLast<span class="comment">()</span></span><br></pre></td></tr></table></figure></p><h4 id="LinkedList的继承情况"><a href="#LinkedList的继承情况" class="headerlink" title="LinkedList的继承情况"></a>LinkedList的继承情况</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><h4 id="LinkedList的成员变量"><a href="#LinkedList的成员变量" class="headerlink" title="LinkedList的成员变量"></a>LinkedList的成员变量</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transient int size = <span class="number">0</span>;</span><br><span class="line">transient <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; first;</span><br><span class="line">transient <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; last;</span><br></pre></td></tr></table></figure><p>可以看得出这就是我们之前学过的双向链表的基本实现。</p><h4 id="LinkedList的构造函数"><a href="#LinkedList的构造函数" class="headerlink" title="LinkedList的构造函数"></a>LinkedList的构造函数</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">LinkedList</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="LinkedList的API"><a href="#LinkedList的API" class="headerlink" title="LinkedList的API"></a>LinkedList的API</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">返回值        函数方法</span><br><span class="line"><span class="built_in">boolean</span>       <span class="built_in">add</span>(E object)</span><br><span class="line"><span class="keyword">void</span>          <span class="built_in">add</span>(<span class="built_in">int</span> location, E object)</span><br><span class="line"><span class="built_in">boolean</span>       addAll(Collection&lt;? extends E&gt; collection)</span><br><span class="line"><span class="built_in">boolean</span>       addAll(<span class="built_in">int</span> location, Collection&lt;? extends E&gt; collection)</span><br><span class="line"><span class="keyword">void</span>          addFirst(E object)</span><br><span class="line"><span class="keyword">void</span>          addLast(E object)</span><br><span class="line"><span class="keyword">void</span>          <span class="built_in">clear</span>()</span><br><span class="line"><span class="keyword">Object</span>        clone()</span><br><span class="line"><span class="built_in">boolean</span>       contains(<span class="keyword">Object</span> object)</span><br><span class="line">Iterator&lt;E&gt;   descendingIterator()</span><br><span class="line">E             element()</span><br><span class="line">E             <span class="built_in">get</span>(<span class="built_in">int</span> location)</span><br><span class="line">E             getFirst()</span><br><span class="line">E             getLast()</span><br><span class="line"><span class="built_in">int</span>           indexOf(<span class="keyword">Object</span> object)</span><br><span class="line"><span class="built_in">int</span>           lastIndexOf(<span class="keyword">Object</span> object)</span><br><span class="line">ListIterator&lt;E&gt;     listIterator(<span class="built_in">int</span> location)</span><br><span class="line"><span class="built_in">boolean</span>       offer(E o)</span><br><span class="line"><span class="built_in">boolean</span>       offerFirst(E e)</span><br><span class="line"><span class="built_in">boolean</span>       offerLast(E e)</span><br><span class="line">E             peek()</span><br><span class="line">E             peekFirst()</span><br><span class="line">E             peekLast()</span><br><span class="line">E             poll()</span><br><span class="line">E             pollFirst()</span><br><span class="line">E             pollLast()</span><br><span class="line">E             pop()</span><br><span class="line"><span class="keyword">void</span>          push(E e)</span><br><span class="line">E             remove()</span><br><span class="line">E             remove(<span class="built_in">int</span> location)</span><br><span class="line"><span class="built_in">boolean</span>       remove(<span class="keyword">Object</span> object)</span><br><span class="line">E             removeFirst()</span><br><span class="line"><span class="built_in">boolean</span>       removeFirstOccurrence(<span class="keyword">Object</span> o)</span><br><span class="line">E             removeLast()</span><br><span class="line"><span class="built_in">boolean</span>       removeLastOccurrence(<span class="keyword">Object</span> o)</span><br><span class="line">E             <span class="built_in">set</span>(<span class="built_in">int</span> location, E object)</span><br><span class="line"><span class="built_in">int</span>           <span class="built_in">size</span>()</span><br><span class="line">&lt;T&gt; T[]       toArray(T[] contents)</span><br><span class="line"><span class="keyword">Object</span>[]      toArray()</span><br></pre></td></tr></table></figure><h4 id="LinkedList的遍历方式"><a href="#LinkedList的遍历方式" class="headerlink" title="LinkedList的遍历方式"></a>LinkedList的遍历方式</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">package demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.image.ImageWatched;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        method1(<span class="built_in">list</span>());</span><br><span class="line">        method2(<span class="built_in">list</span>());</span><br><span class="line">        method3(<span class="built_in">list</span>());</span><br><span class="line">        method4(<span class="built_in">list</span>());</span><br><span class="line">        method5(<span class="built_in">list</span>());</span><br><span class="line">        method6(<span class="built_in">list</span>());</span><br><span class="line">        method7(<span class="built_in">list</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个200000大小的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkedList <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            linkedList.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> linkedList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过随机访问遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size(); i++) &#123;</span><br><span class="line">            <span class="built_in">list</span>.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"随机访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过迭代器遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = <span class="built_in">list</span>.iterator(); iter.hasNext();) &#123;</span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"迭代器访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过pollFirst()遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">list</span>.pollFirst() != null)&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"pollFirst()访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过pollLast()遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">list</span>.pollLast() != null)&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"pollLast()访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过for-each遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Integer item : <span class="built_in">list</span>) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"for-each访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过removeFirst()遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method6</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">list</span>.removeFirst() != null) &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"removeFirst()访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过removeLast()遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method7</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">list</span>.removeLast() != null) &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = end - start;</span><br><span class="line">        System.out.println(<span class="string">"removeLast()访问遍历: "</span> + interval + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fygxpcmikyj309o05daa7.jpg" alt=""><br>可以发现遍历LinkedList时，使用removeFirst()以及removeLast()或者pollFirst()以及pollLast()效率比较高，但是它们遍历时，会删除数据，如果只想读取，但不希望修改数据的时候，最好使用<strong>for-each</strong>方式来遍历，而且这个方法可以不需要担心<strong>数组越界</strong>的问题。但是最好不要使用<strong>随机访问</strong>的方式来遍历LinkedList。</p><h4 id="removeFirst-和pollFirst-的区别"><a href="#removeFirst-和pollFirst-的区别" class="headerlink" title="removeFirst()和pollFirst()的区别"></a>removeFirst()和pollFirst()的区别</h4><p>pollFirst()方法：用于取首元素；<br>removeFirst()方法: 用于删除首元素，同时返回首元素；<br><strong>测试实例：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.image.ImageWatched;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pull_remove</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"list: "</span> + getList());</span><br><span class="line">        pollTest(getList());</span><br><span class="line">        removeTest(getList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LinkedList <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedList <span class="built_in">list</span> = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">list</span>.addLast(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pollFirst()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pollTest</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">list</span>.pollFirst() != null) &#123;</span><br><span class="line">            System.out.println(<span class="string">"poll第"</span> + i + <span class="string">"次成功"</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// removeFirst()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeTest</span><span class="params">(LinkedList&lt;Integer&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">list</span>.removeFirst() != null) &#123;</span><br><span class="line">                System.out.println(<span class="string">"remove第"</span> + i + <span class="string">"次成功"</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"次remove出现问题"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>效果:</strong><br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fygyfud22yj308r08i0sz.jpg" alt=""></p><p><strong>解析:</strong><br>removeFirst在LinkedList为空的时候进行remove操作会抛出一个NoSuchElement的异常;<br>pollFirst在LinkedList为空的时候进行poll操作则会返回一个null;  </p><p><strong>综上:</strong><br>当我们需要连续取空一个链表的时候，应该使用pull操作而不应该使用remove操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LinkedList使用介绍&quot;&gt;&lt;a href=&quot;#LinkedList使用介绍&quot; class=&quot;headerlink&quot; title=&quot;LinkedList使用介绍&quot;&gt;&lt;/a&gt;LinkedList使用介绍&lt;/h3&gt;&lt;p&gt;LinkedList继承于&lt;strong&gt;A
      
    
    </summary>
    
      <category term="Java开发" scheme="http://www.zikunfu.cn/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.zikunfu.cn/tags/Java/"/>
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Django导入本地CSS/JS文件</title>
    <link href="http://www.zikunfu.cn/post/54a83838.html"/>
    <id>http://www.zikunfu.cn/post/54a83838.html</id>
    <published>2018-12-17T12:47:01.000Z</published>
    <updated>2018-12-17T13:20:00.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Django-使用本地CSS-JS文件"><a href="#Django-使用本地CSS-JS文件" class="headerlink" title="Django 使用本地CSS / JS文件"></a>Django 使用本地CSS / JS文件</h4><p>之前一直在纠结Django的html文件如何引入本地CSS和JS，但是找了很多资料都没能成功，后来终于找到了一个新版本Django能使用的方法。</p><h5 id="创建一个static文件夹"><a href="#创建一个static文件夹" class="headerlink" title="创建一个static文件夹"></a>创建一个static文件夹</h5><p>在Django项目目录下，<strong>manage.py</strong> 同层级下创建一个名为 <strong>static</strong> 的文件夹，我们将CSS和JS甚至是Image等文件放到这个文件夹下。例如：</p><p><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fya1o4xdvvj30gi04ndfv.jpg" alt=""></p><h5 id="修改setting-py配置"><a href="#修改setting-py配置" class="headerlink" title="修改setting.py配置"></a>修改setting.py配置</h5><p>在末尾添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">HERE = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">HERE = os.path.join(HERE, <span class="string">'../'</span>)</span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    <span class="comment"># Put strings here, like "/home/html/static" or "C:/www/django/static".</span></span><br><span class="line">    <span class="comment"># Always use forward slashes, even on Windows.</span></span><br><span class="line">    <span class="comment"># Don't forget to use absolute paths, not relative paths.</span></span><br><span class="line">    os.path.join(HERE, <span class="string">'static/'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当然我们也可以修改存放JS/CSS的文件夹名称，此处就不多言了，dalao们自己去修改上面的那串代码吧。</p><p><strong>样例:</strong></p><p><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fya21zlhd8j30ii0753yr.jpg" alt=""></p><h5 id="导入方式"><a href="#导入方式" class="headerlink" title="导入方式"></a>导入方式</h5><p>我们在完成了上面的所有工作后，只需要在需要导入的位置以下面的方式导入就行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../static/css/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../static/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大功告成!0.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Django-使用本地CSS-JS文件&quot;&gt;&lt;a href=&quot;#Django-使用本地CSS-JS文件&quot; class=&quot;headerlink&quot; title=&quot;Django 使用本地CSS / JS文件&quot;&gt;&lt;/a&gt;Django 使用本地CSS / JS文件&lt;/h4&gt;&lt;
      
    
    </summary>
    
      <category term="Django" scheme="http://www.zikunfu.cn/categories/Django/"/>
    
    
      <category term="Django" scheme="http://www.zikunfu.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-next主题博客控制评论系统特定页面存在</title>
    <link href="http://www.zikunfu.cn/post/5da274e4.html"/>
    <id>http://www.zikunfu.cn/post/5da274e4.html</id>
    <published>2018-12-15T15:55:25.000Z</published>
    <updated>2018-12-15T16:26:51.493Z</updated>
    
    <content type="html"><![CDATA[<h4 id="控制评论系统显示与隐藏"><a href="#控制评论系统显示与隐藏" class="headerlink" title="控制评论系统显示与隐藏"></a>控制评论系统显示与隐藏</h4><h5 id="hexo博客相关问题"><a href="#hexo博客相关问题" class="headerlink" title="hexo博客相关问题:"></a>hexo博客相关问题:</h5><p>大家在使用hexo部署博客的时候可能会发现，对于不同的页面，hexo并没有考虑分类页面，标签页面或者说是其他的页面是否需要评论系统的存在。个人感觉既然只是分类页面，标签页面，那么只起到一个汇总的作用，可能并不需要大家评论什么，而且在我的背景下，这个评论系统就显得非常多余，而且贼丑，所以能干（强迫症）的我选择去调整一下。</p><h5 id="hexo默认配置："><a href="#hexo默认配置：" class="headerlink" title="hexo默认配置："></a>hexo默认配置：</h5><p>我们的目的是让评论系统只存在于我们需要的页面，比如说文章页面。那么我们很自然的就会想到去修改相关的布局文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySelfBolg<span class="regexp">/themes/</span><span class="keyword">next</span><span class="regexp">/layout/</span>_layout.swig</span><br></pre></td></tr></table></figure></p><p>在基本布局中，我们直接搜索<strong>comments</strong>（Ctrl+F）,发现：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_partials/comments.swig' %&#125;</span><span class="xml">// 划重点</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>这就是告诉我们还得去看看这个<strong>comments.swig</strong>文件，看看这个评论系统的布局设置。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.comments %&#125;</span><span class="xml">// 划重点，这个是第一行的代码</span></span><br></pre></td></tr></table></figure></p><p>这个代表如果页面的comments属性为true，则选择渲染评论系统，那么我们就得想办法，让页面comments属性为false。  </p><h5 id="失败方案"><a href="#失败方案" class="headerlink" title="失败方案:"></a>失败方案:</h5><p>一开始我的想法是在<strong>_layout.swig</strong>基本布局文件中，设置if语句，判断如果页面是文章页面才选择渲染，但是一直报错，可能是我的语句有点问题，所以就没达到目的，后来我选择了上面说的那种设置页面属性的方法。如果有<strong>dalao</strong> 能在<strong>_layout.swig</strong> 用if语句达到过滤分类页面等的效果的话，希望能在下方留言，我看到会修改本篇文章，接下来讲讲修改属性的方法。</p><h5 id="成功方案"><a href="#成功方案" class="headerlink" title="成功方案:"></a>成功方案:</h5><p>我找到<strong>MySelfBlog/source/categories/index.md</strong> 文件，用<strong>Typora</strong> 编辑打开，发现<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">title:</span> 标签</span><br><span class="line"><span class="symbol">date:</span> <span class="number">2018</span><span class="number">-11</span><span class="number">-25</span> <span class="number">12</span>:<span class="number">37</span>:<span class="number">40</span></span><br><span class="line"><span class="symbol">type:</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure></p><p>然后我们添加一条属性:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>修改后如下:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy7w64vjtbj30lw0gaglw.jpg" alt=""><br>修改成功后，我们在git上<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo start -debug</span><br></pre></td></tr></table></figure></p><p>修改成功!!!</p><h5 id="原本的样式"><a href="#原本的样式" class="headerlink" title="原本的样式:"></a>原本的样式:</h5><p><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy7w63vt5oj30mr0hmq3e.jpg" alt=""></p><h5 id="修改后的样式"><a href="#修改后的样式" class="headerlink" title="修改后的样式:"></a>修改后的样式:</h5><p><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy7w64fyuwj30m10cg74g.jpg" alt=""><br>是不是看上去和谐多了呢?0.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;控制评论系统显示与隐藏&quot;&gt;&lt;a href=&quot;#控制评论系统显示与隐藏&quot; class=&quot;headerlink&quot; title=&quot;控制评论系统显示与隐藏&quot;&gt;&lt;/a&gt;控制评论系统显示与隐藏&lt;/h4&gt;&lt;h5 id=&quot;hexo博客相关问题&quot;&gt;&lt;a href=&quot;#hexo博客相
      
    
    </summary>
    
      <category term="hexo-next配置" scheme="http://www.zikunfu.cn/categories/hexo-next%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="前端" scheme="http://www.zikunfu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo主题" scheme="http://www.zikunfu.cn/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB最新安装详解与诸多问题处理</title>
    <link href="http://www.zikunfu.cn/post/956c615f.html"/>
    <id>http://www.zikunfu.cn/post/956c615f.html</id>
    <published>2018-12-09T15:31:49.000Z</published>
    <updated>2018-12-09T15:34:55.759Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MongoDB安装过程"><a href="#MongoDB安装过程" class="headerlink" title="MongoDB安装过程:"></a>MongoDB安装过程:</h4><h5 id="源程序的下载"><a href="#源程序的下载" class="headerlink" title="源程序的下载:"></a>源程序的下载:</h5><p><strong>官网下载地址</strong>:<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">点此转入下载页面</a><br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0r5htyb5j30v10dkmxt.jpg" alt="样例"><br>根据你的系统下载 32 位或 64 位的<strong> .msi</strong> 文件(或者也可以下载ZIP压缩包),版本(version)安全起见选（current version），不要选最新的，操作系统按照自己的版本选，Package选MSI（ZIP也可以，不过没必要），下载后双击该文件，按操作提示安装即可。</p><h5 id="程序安装流程"><a href="#程序安装流程" class="headerlink" title="程序安装流程:"></a>程序安装流程:</h5><p>启动安装程序后，一路<strong>Next</strong>，直到如图位置:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0r5ia74ij30dv0asq3e.jpg" alt=""><br>我们选择Custom自定义安装。<br>接着就到了:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0r5ipyy1j30dv0as74y.jpg" alt=""><br>这里我们选择自定义安装目录，接着Next。<br>又到了：<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0r5k0vx1j30dv0asq3g.jpg" alt=""><br>这个位置的两个目录最好不要改动，否则可能会出现蜜汁问题，所以No-Zuo-No-Die,乖乖的<strong>Next</strong>。<br><strong>注意：</strong><br>这里很关键，要取消勾选，我们选择不安装图形化界面，否则可能会安装很久很久很久……（网上有人安装了好久好久，最后只好Kill了进程，重新安装）<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0rpxagwqj30dv0as74p.jpg" alt=""><br><strong>注意:</strong><br>中间安装可能会出现问题,问题如下:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0srban1lj30aw060aa5.jpg" alt=""><br>解决方法就是选择<strong>Ignore</strong>,直接忽略这个问题，我们放到后面去处理服务的问题。如果你是个很有毅力的boy or girl，可以选择<strong>Retry</strong>，那么结果不出意外的话，还是会出现这个弹窗，然后重复以上……直到你放弃治疗，<strong>Ignore</strong>。  </p><p>最后，恶心的安装流程就结束了。<br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fy0r5je59rj30dv0asaae.jpg" alt=""><br>安装完了之后，大概的目录文件如图:<br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fy0rur37d6j30gs07zdg9.jpg" alt=""></p><h5 id="MongoDB配置启动"><a href="#MongoDB配置启动" class="headerlink" title="MongoDB配置启动"></a>MongoDB配置启动</h5><p><strong>MongoDB</strong>将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它(具体意思看不懂也无所谓，按着做就行)。<br>例如:<br>我们之前MongoDB安装在了<strong>D:\mongodb</strong>目录下;<br>我们进入到该目录下的<strong>data目录</strong>中,即<strong>D:\mongodb\data</strong>，应该是空的;<br>我们在这个目录下创建一个<strong>db文件夹</strong>,即<strong>D:\mongodb\data\db</strong>;</p><p><strong>注意:</strong><br><strong>db文件夹</strong>作为安装目录\data\的备用目录，启动时，使用的是安装目录例如:<strong>D:\mongodb\bin\下的mongod.exe</strong>，如果直接启动，实际使用的是<strong>C:\data\db\</strong> 为数据库文件存储目录，需要确保该目录存在。</p><p>可以使用<strong>–dbpath “安装目录\data\db”</strong> 显式指定该目录为存储位置，来启动MongoDB，如：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="symbol">\m</span>ongodb<span class="symbol">\b</span>in&gt;mongod.exe --dbpath "D:<span class="symbol">\m</span>ongodb<span class="symbol">\d</span>ata<span class="symbol">\d</span>b"</span><br></pre></td></tr></table></figure></p><p>启动成功，效果如下:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0sjpqpuhj30nj07twev.jpg" alt=""><br>说明此时MongoDB已经开启，浏览器访问 <a href="http://localhost:27017/" target="_blank" rel="noopener">本地27017端口页面</a>，页面上输出：<br>It looks like you are trying to access MongoDB over HTTP on the native driver port.<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0spx7boaj30q806ewf1.jpg" alt=""><br>说明MongoDB已经启动了，且它的默认端口(27017)没有被占用。<br>然后，我们要再打开一个CMD命令行（千万别关闭之前那个CMD，否则MongoDB服务就停了），CD到bin目录下(例如:D:\mongodb\bin),输入:mongo(或者mongo.exe)，启动mongoDB的操作终端,如下:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0t4o4d0hj30ub0e3q5b.jpg" alt=""><br><strong>简单实验:</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure></p><h5 id="MongoDB配置服务"><a href="#MongoDB配置服务" class="headerlink" title="MongoDB配置服务"></a>MongoDB配置服务</h5><p>打开任务管理器，检查本地MongoDB服务，因为我们在安装时勾选了，所以按理来说是有这个服务的，从services.msc里可以看到：<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0t8lyippj30ms0goq4w.jpg" alt=""><br>或者在任务管理器上，类似于这样:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0tciuo60j30q8072gm3.jpg" alt=""><br><strong>注意:</strong><br>但是这里有可能有点不同，可能你的MongoDB服务是关闭的，而且启动不了这项服务,并且出现下面这样的响应:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0tex1473j30ey066aan.jpg" alt=""><br><strong>解决方案:</strong><br>使用管理员身份打开CMD，然后删除安装时默认创建的MongoDB服务(注意这里的服务名要换成你本机的,如果你的服务名不同的话)。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc <span class="keyword">delete</span> MongoDB</span><br></pre></td></tr></table></figure></p><p>然后我们使用下面这一行命令重新创建MongoDB服务:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\mongodb\bin\mongod.exe <span class="params">--dbpath</span> <span class="string">"D:\mongodb\data"</span> <span class="params">--logpath</span> <span class="string">"D:\mongodb\log\db.log"</span> <span class="params">--install</span> <span class="params">--serviceName</span> <span class="string">"mongo"</span> <span class="params">--logappend</span> <span class="params">--directoryperdb</span></span><br></pre></td></tr></table></figure></p><p>创建成功之后可以在任务管理器或者服务界面(services.msc)看到MongoDB的服务(mongo)，然后选中，右键启动就可以了，启动后如下:</p><p><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0tmbsf32j30i100owea.jpg" alt=""></p><p>当然你也可以使用命令启动服务,这里的服务名换成你自己设置的服务名:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mongo</span><br></pre></td></tr></table></figure></p><p>另外，建议将MongoDB的bin目录的路径添加的系统的环境变量中去，方便在命令行打开查看mongodb数据库。否则我们启动的时候，每次都需要CD到<strong>bin目录</strong>，运行mongo.exe，所以我们可以通过添加环境变量的方法来简化操作。<br>设置环境变量:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0uryht21j30h5096dg8.jpg" alt=""><br>添加你的<strong>bin目录:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fy0v913a5wj30el0flwf3.jpg" alt=""><br>之后就可以在MongoDB服务开启的状态下，直接CMD通过mongo命令启动MongoDB了,不需要CD到bin目录，再开启mongo。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0t4o4d0hj30ub0e3q5b.jpg" alt=""><br>是不是很方便呢?<br><strong>注意:</strong><br>其中也有可能出现这个问题:<br><strong>报错“拒绝访问”:</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2016-11-01T20:52:21.647+0800 I CONTROL [main] Trying <span class="keyword">to</span> install Windows<span class="built_in"> service </span>‘MongoDB'</span><br><span class="line"></span><br><span class="line">2016-11-01T20:52:21.648+0800 I CONTROL [main] <span class="builtin-name">Error</span> connecting <span class="keyword">to</span> the<span class="built_in"> Service </span>Control Manager: 拒绝访问。</span><br></pre></td></tr></table></figure></p><p><strong>原因：</strong>未使用管理员身份运行CMD<br><strong>解决方案:</strong> 找到命令处理程序C:\Windows\System32\cmd.exe右键以管理员身份运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MongoDB安装过程&quot;&gt;&lt;a href=&quot;#MongoDB安装过程&quot; class=&quot;headerlink&quot; title=&quot;MongoDB安装过程:&quot;&gt;&lt;/a&gt;MongoDB安装过程:&lt;/h4&gt;&lt;h5 id=&quot;源程序的下载&quot;&gt;&lt;a href=&quot;#源程序的下载&quot; c
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://www.zikunfu.cn/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://www.zikunfu.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-输出数组元素的方法汇总</title>
    <link href="http://www.zikunfu.cn/post/933a9886.html"/>
    <id>http://www.zikunfu.cn/post/933a9886.html</id>
    <published>2018-12-05T09:25:02.000Z</published>
    <updated>2018-12-07T10:08:20.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输出数组元素"><a href="#输出数组元素" class="headerlink" title="输出数组元素:"></a>输出数组元素:</h3><p>一般来说，我们可以通过for循环遍历元素输出所有元素，但是在<strong>java</strong>中我们有更多的方法来达到我们的目的。比如说封装的<strong>Arrays类</strong>就可以很好的帮助我们处理数组的输出问题,也可以通过for-each来缩短代码量,甚至我们可以选择通过Java的泛型来自己写一个适合大多数数据对象的输出函数。总的来说，归纳有以下几种方法:</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组:"></a>一维数组:</h4><h5 id="定义变量："><a href="#定义变量：" class="headerlink" title="定义变量："></a>定义变量：</h5><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int[] array1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">char[] array2 = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br><span class="line"><span class="symbol">Integer</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="symbol">Character</span>[] charArray = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br></pre></td></tr></table></figure><h5 id="1-for循环"><a href="#1-for循环" class="headerlink" title="(1)for循环"></a>(1)for循环</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array1.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">            System.out.print(array1[<span class="built_in">i</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array2.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">   System.out.print(array2[<span class="built_in">i</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxpoc23j305w02bdfm.jpg" alt="第一种"></p><h5 id="2-for-each循环"><a href="#2-for-each循环" class="headerlink" title="(2)for-each循环"></a>(2)for-each循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : array1) &#123;</span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> i : array2) &#123;</span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxq4whqj3065029wea.jpg" alt="第二种"></p><h5 id="3-利用Arrays类的toString方法"><a href="#3-利用Arrays类的toString方法" class="headerlink" title="(3)利用Arrays类的toString方法"></a>(3)利用Arrays类的toString方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(array1));</span><br><span class="line">System.out.println(Arrays.toString(array2));</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxqgkbaj309e02aweb.jpg" alt="第三种"></p><h5 id="4-利用泛型自己写一个输出函数"><a href="#4-利用泛型自己写一个输出函数" class="headerlink" title="(4)利用泛型自己写一个输出函数"></a>(4)利用泛型自己写一个输出函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">printArray(intArray); <span class="comment">// 输出函数</span></span><br><span class="line">printArray(charArray);<span class="comment">// 输出函数</span></span><br><span class="line"><span class="comment">// 以下为自定义输出函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(E element : inputArray) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%s "</span>, element);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxqwun3j309v02b0sk.jpg" alt="第四种"></p><h4 id="二维数组-多维数组"><a href="#二维数组-多维数组" class="headerlink" title="二维数组(多维数组):"></a>二维数组(多维数组):</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量:"></a>定义变量:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array3 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span>[][] array4 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br><span class="line">Integer[][] intArray2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">Character[][] charArray2 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h5 id="1-for循环-1"><a href="#1-for循环-1" class="headerlink" title="(1)for循环"></a>(1)for循环</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"第一种方法(for循环):"</span>);</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array3.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">j</span>  = <span class="number">0</span>; <span class="built_in">j</span> &lt; array3[<span class="built_in">i</span>].<span class="built_in">length</span>; <span class="built_in">j</span>++)&#123;</span><br><span class="line">System.out.print(array3[<span class="built_in">i</span>][<span class="built_in">j</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array4.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">j</span>  = <span class="number">0</span>; <span class="built_in">j</span> &lt; array4[<span class="built_in">i</span>].<span class="built_in">length</span>; <span class="built_in">j</span>++)&#123;</span><br><span class="line">System.out.print(array4[<span class="built_in">i</span>][<span class="built_in">j</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxrglakj305b03nmwy.jpg" alt="第一种"></p><h5 id="2-for-each循环-1"><a href="#2-for-each循环-1" class="headerlink" title="(2)for-each循环"></a>(2)for-each循环</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int[] i : <span class="type">array3</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(int j  : <span class="type">i</span>)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(char[] i : <span class="type">array4</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(char j : <span class="type">i</span>)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxrtqz5j306f03ja9v.jpg" alt="第二种"></p><h5 id="3-利用Arrays类的deepToString方法"><a href="#3-利用Arrays类的deepToString方法" class="headerlink" title="(3)利用Arrays类的deepToString方法"></a>(3)利用Arrays类的deepToString方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(array3));</span><br><span class="line">System.out.println(Arrays.deepToString(array4));</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxs9tqxj30aa02bwec.jpg" alt="第三种"></p><h5 id="4-利用泛型自己写一个输出函数-1"><a href="#4-利用泛型自己写一个输出函数-1" class="headerlink" title="(4)利用泛型自己写一个输出函数"></a>(4)利用泛型自己写一个输出函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">printArray2(intArray2);<span class="comment">// 输出函数</span></span><br><span class="line">printArray2(charArray2); <span class="comment">// 输出函数</span></span><br><span class="line"><span class="comment">// 以下为自定义输出函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray2</span><span class="params">(E[][] inputArray)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(E[] element1 : inputArray)&#123;</span><br><span class="line"><span class="keyword">for</span>(E element2 : element1)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%s "</span>, element2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxsmlirj309j03ojr8.jpg" alt="第四种"></p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码:"></a>测试代码:</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">out_array</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span>[] array1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] array2 = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] array3 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">char</span>[][] array4 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br><span class="line">        Integer[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        Character[] charArray = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br><span class="line">        Integer[][] intArray2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">        Character[][] charArray2 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"一维数组输出:"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第一种方法(for循环):"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(array1[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(array2[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第二种方法(for-each循环)"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array1) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : array2) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第三种方法(利用Arrays类的toString方法):"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(array1));</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(array2));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第四种方法(利用泛型自己写一个输出函数):"</span>);</span><br><span class="line">        printArray(intArray);</span><br><span class="line">        printArray(charArray);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"二维数组输出方法:"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第一种方法(for循环):"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array3.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j  = <span class="number">0</span>; j &lt; array3[i].length; j++)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(array3[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array4.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j  = <span class="number">0</span>; j &lt; array4[i].length; j++)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(array4[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第二种方法(for-each循环:"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] i : array3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j  : i)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span>[] i : array4)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> j : i)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第三种方法(利用Arrays类的deepToString方法):"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.deepToString(array3));</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.deepToString(array4));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第四种方法(利用泛型自己写一个输出函数):"</span>);</span><br><span class="line">        printArray2(intArray2);</span><br><span class="line">        printArray2(charArray2);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span>(<span class="params">E[] inputArray</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(E element : inputArray) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%s "</span>, element);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray2</span>(<span class="params">E[][] inputArray</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(E[] element1 : inputArray)&#123;</span><br><span class="line">                <span class="keyword">for</span>(E element2 : element1)&#123;</span><br><span class="line">                    System.<span class="keyword">out</span>.printf(<span class="string">"%s "</span>, element2);</span><br><span class="line">                &#125;</span><br><span class="line">                System.<span class="keyword">out</span>.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总体结果"><a href="#总体结果" class="headerlink" title="总体结果:"></a>总体结果:</h4><h5 id="一维数组-1"><a href="#一维数组-1" class="headerlink" title="一维数组:"></a>一维数组:</h5><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxtgkb6j309z092mx8.jpg" alt="一维"></p><h5 id="二维数组（多维数组）"><a href="#二维数组（多维数组）" class="headerlink" title="二维数组（多维数组）:"></a>二维数组（多维数组）:</h5><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxyaxtudooj30ar0dn3yn.jpg" alt="二维"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;输出数组元素&quot;&gt;&lt;a href=&quot;#输出数组元素&quot; class=&quot;headerlink&quot; title=&quot;输出数组元素:&quot;&gt;&lt;/a&gt;输出数组元素:&lt;/h3&gt;&lt;p&gt;一般来说，我们可以通过for循环遍历元素输出所有元素，但是在&lt;strong&gt;java&lt;/strong&gt;中
      
    
    </summary>
    
      <category term="Java开发" scheme="http://www.zikunfu.cn/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.zikunfu.cn/tags/Java/"/>
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-codePoint和length的区别</title>
    <link href="http://www.zikunfu.cn/post/f442d1f1.html"/>
    <id>http://www.zikunfu.cn/post/f442d1f1.html</id>
    <published>2018-12-03T01:51:56.000Z</published>
    <updated>2018-12-05T09:22:02.061Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原理差异"><a href="#原理差异" class="headerlink" title="原理差异:"></a>原理差异:</h4><p><strong>length()</strong> 方法返回的String字符串对应<strong>UTF-16编码</strong>需要的代码单元数量，但JAVA用的<strong>Unicode字符集</strong>并不能通过一个代码单元来代表所有的字符。对于大多数的常用Unicode字符可以仅需要<strong>一个</strong>代码单元就可以表示，但是对于一部分的特殊字符需要<strong>两个</strong>代码单元才能成功表示。  </p><p><strong>codePointCount()</strong> 方法，通过<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello world"</span>;</span><br><span class="line"><span class="built_in">int</span> strLength = <span class="built_in">str</span>.codePointCount(<span class="number">0</span>, <span class="built_in">str</span>.length()) <span class="comment">// 返回字符串长度</span></span><br></pre></td></tr></table></figure></p><p>方法的调用，我们可以得到码点数量，也就是实际意义上的字符串长度。  </p><p>所以通俗来讲，就是说<strong>length()</strong> 是实际上电脑中以<strong>UTF-16编码存储的字符个数</strong>。而<strong>codePointCount()</strong> 方法返回的是<strong>我们认为的字符串长度，是实际上的字符个数</strong>。  </p><h4 id="附带codePointCount-方法的解析"><a href="#附带codePointCount-方法的解析" class="headerlink" title="附带codePointCount()方法的解析:"></a>附带codePointCount()方法的解析:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointCount</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"><span class="comment">// beginIndex-- 这是该在文本范围的第一个字符索引。</span></span></span><br><span class="line"><span class="function"><span class="comment">// endIndex-- 这是文本范围的最后一个字符之后的索引。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 相当于对于字符串String[beginIndex, endIndex-1]求解码点数量</span></span></span><br><span class="line"><span class="function"><span class="comment">// 也可以认为是对于[beginIndex, endIndex)左闭右开范围的字符数目</span></span></span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试:"></a>代码测试:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">codepoint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;</span><br><span class="line">        String str2 = <span class="string">"\uD835\uDD68"</span>;</span><br><span class="line">        <span class="keyword">int</span> n1 = str1.length();</span><br><span class="line">        <span class="keyword">int</span> n2 = str1.codePointCount(<span class="number">0</span>, n1);</span><br><span class="line">        <span class="keyword">int</span> n3 = str2.length();</span><br><span class="line">        <span class="keyword">int</span> n4 = str2.codePointCount(<span class="number">0</span>, n3);</span><br><span class="line">        System.out.println(<span class="string">"String1:"</span> + str1);</span><br><span class="line">        System.out.println(<span class="string">"String1.length() return:"</span> + n1);</span><br><span class="line">        System.out .println(<span class="string">"String1.Codepointcount() return:"</span> + n2);</span><br><span class="line">        System.out.println(<span class="string">"String2:"</span> + str2);</span><br><span class="line">        System.out.println(<span class="string">"String2.length() return:"</span> + n3);</span><br><span class="line">        System.out .println(<span class="string">"String2.Codepointcount() return:"</span> + n4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果:"></a>测试结果:</h4><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wly1fxvyzwrtozj308k05yt8o.jpg" alt="效果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;原理差异&quot;&gt;&lt;a href=&quot;#原理差异&quot; class=&quot;headerlink&quot; title=&quot;原理差异:&quot;&gt;&lt;/a&gt;原理差异:&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;length()&lt;/strong&gt; 方法返回的String字符串对应&lt;strong&gt;UTF-16编码&lt;/
      
    
    </summary>
    
      <category term="Java开发" scheme="http://www.zikunfu.cn/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://www.zikunfu.cn/tags/Java/"/>
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Android开发(1)-输出字符并修改字体大小和颜色</title>
    <link href="http://www.zikunfu.cn/post/1792901c.html"/>
    <id>http://www.zikunfu.cn/post/1792901c.html</id>
    <published>2018-11-30T13:51:07.000Z</published>
    <updated>2018-11-30T14:03:52.621Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h4><p>在Android Studio虚拟机的屏幕上输出学号和中英文名。</p><h4 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h4><h5 id="赋值给控件文本内容"><a href="#赋值给控件文本内容" class="headerlink" title="赋值给控件文本内容"></a>赋值给控件文本内容</h5><h6 id="粗暴方法："><a href="#粗暴方法：" class="headerlink" title="粗暴方法："></a>粗暴方法：</h6><p>定位到<strong>activity_main.xml</strong>文件下，修改<strong>android:text属性为16121198-符子坤-zikunfu</strong>，但是呢，我们会发现出现了一定的问题，如图，我们获得了一个警告，这个警告在这个情况下代表着我们可能是直接对控件内容进行了赋值。<br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxqeo3kekkj30fc01rq2x.jpg" alt="警告"></p><h6 id="可行方法"><a href="#可行方法" class="headerlink" title="可行方法:"></a>可行方法:</h6><p><strong>解决方案：</strong>在Android中建议引用全局变量，将我们所需要内容写在<strong>strings.xml</strong>文件内，通过以下方式进行赋值。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxqer41chdj308y02e743.jpg" alt="文件位置"><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxqesb2v23j30da03cdfr.jpg" alt="语法格式"><br>然后我们在<strong>activity_main.xml</strong>文件下,通过<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android: <span class="built_in">text</span>=<span class="string">"@string/author_id_name"</span></span><br></pre></td></tr></table></figure></p><p>来实现对文本内容的赋值。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxqevniw2mj30d50743yq.jpg" alt="语法"></p><h5 id="修改控件字体颜色"><a href="#修改控件字体颜色" class="headerlink" title="修改控件字体颜色"></a>修改控件字体颜色</h5><p>同样，我们也可以使用这种方法来对文本内容的颜色进行修改，在<strong>colors.xml</strong>文件下，添加对应的颜色变量，例如：<br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxqey8bajvj30aj04gdfv.jpg" alt="颜色"><br>我们选择了红色red，然后在<strong>activity_main.xml</strong>文件下使用<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">android:</span>textColor=<span class="string">"@color/red"</span></span><br></pre></td></tr></table></figure></p><p>来设置文本内容的字体颜色。<br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxqey8npq7j30d20770sy.jpg" alt="颜色"></p><h5 id="修改控件字体大小"><a href="#修改控件字体大小" class="headerlink" title="修改控件字体大小"></a>修改控件字体大小</h5><p>后面呢，我们可以对字体的大小也进行修改，这里我们设置为<strong>30sp（按照官方文档最好使用sp）</strong>。<br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxqey933boj30b10640sw.jpg" alt="大小"></p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果:"></a>实验结果:</h4><p>最后，我们<strong>Run “app”</strong>就可以在虚拟机上看到所需要的学号,中英文名字显示在屏幕的中央了。<br><img src="http://wx3.sinaimg.cn/small/006zoO1wgy1fxqf4dy8gvj30u01hc3zo.jpg" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实验要求：&quot;&gt;&lt;a href=&quot;#实验要求：&quot; class=&quot;headerlink&quot; title=&quot;实验要求：&quot;&gt;&lt;/a&gt;实验要求：&lt;/h4&gt;&lt;p&gt;在Android Studio虚拟机的屏幕上输出学号和中英文名。&lt;/p&gt;
&lt;h4 id=&quot;实验过程：&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Android开发" scheme="http://www.zikunfu.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="编程语言" scheme="http://www.zikunfu.cn/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Android" scheme="http://www.zikunfu.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-next主题博客自定义设置标签页面的标签样式</title>
    <link href="http://www.zikunfu.cn/post/1ca6df66.html"/>
    <id>http://www.zikunfu.cn/post/1ca6df66.html</id>
    <published>2018-11-25T08:33:35.000Z</published>
    <updated>2018-11-25T09:03:56.312Z</updated>
    
    <content type="html"><![CDATA[<h5 id="修改标签样式"><a href="#修改标签样式" class="headerlink" title="修改标签样式"></a>修改标签样式</h5><p>一直感觉标签页的这个标签样式非常难看，又小又灰，换了背景图之后显得连看都看不清楚了，所以我就打算去自己修改一下这个样式，让他变的和谐起来。不过呢，在这个修改的过程中发现了这个东东竟然修改起来很麻烦，它不是由一个<strong>class</strong>类别属性，分配到某一个预定义的类别上的，也就是说它不是外联样式（CSS外联样式表设定），而是内联样式决定其样式。如图：<br><strong>标签对应的样式：</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxkel6tub6j30gs06jq3i.jpg" alt="样式"><br>由于这些标签的样式都是内联样式，所以我们就无法通过自定义样式表来修改这些标签的样式，因为<strong>内联样式的优先级是大于外联样式</strong>的，所以即使我们自定义样式，这些标签样式也不会被修改。那么我们为了修改这些标签的样式，只能去寻找这些标签的生成代码，然后在生成代码里修改样式。<br>我们审查元素，发现上级<strong>class</strong>是<strong>post-body</strong>,然后我们到<strong>页面生成文件page.swig</strong>中寻找，该文件位置<strong>MySelfBlog/themes/next/layout/page.swig</strong>,找到<strong>PAGE BODY</strong>代码块，很快就发现了我们的目标：<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxkew9m4i1j30q40b1gme.jpg" alt="代码"><br>找到了罪魁祸首，那么我们就只需要按自己的需要修改对应的参数就哦啦，我最终修改为：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="class"><span class="keyword">class</span>="<span class="title">tag</span>-<span class="title">cloud</span>-<span class="title">tags</span>"&gt;</span></span><br><span class="line"><span class="class">     </span>&#123;&#123; tagcloud(&#123;min_font: <span class="number">20</span>, max_font: <span class="number">30</span>, amount: <span class="number">300</span>, color: <span class="keyword">true</span>, start_color: <span class="string">'#555'</span>, end_color: <span class="string">'#111'</span>&#125;) &#125;&#125;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>效果对比：<br><strong>原样式：</strong><br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fxkegf7bk8j30d107eq39.jpg" alt="原样式"><br><strong>最终样式:</strong><br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fxkf16jpx6j30hk09h750.jpg" alt="最终样式"><br>个人感觉还是好看了点，不是吗？0.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;修改标签样式&quot;&gt;&lt;a href=&quot;#修改标签样式&quot; class=&quot;headerlink&quot; title=&quot;修改标签样式&quot;&gt;&lt;/a&gt;修改标签样式&lt;/h5&gt;&lt;p&gt;一直感觉标签页的这个标签样式非常难看，又小又灰，换了背景图之后显得连看都看不清楚了，所以我就打算去自己修改一
      
    
    </summary>
    
      <category term="hexo-next配置" scheme="http://www.zikunfu.cn/categories/hexo-next%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="前端" scheme="http://www.zikunfu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo主题" scheme="http://www.zikunfu.cn/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-next主题博客添加分类，标签页以及自定义样式</title>
    <link href="http://www.zikunfu.cn/post/a0fe0969.html"/>
    <id>http://www.zikunfu.cn/post/a0fe0969.html</id>
    <published>2018-11-25T07:44:08.000Z</published>
    <updated>2018-11-25T08:32:12.300Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加分类选项"><a href="#添加分类选项" class="headerlink" title="添加分类选项"></a>添加分类选项</h4><h5 id="创建分类页并添加“type”属性"><a href="#创建分类页并添加“type”属性" class="headerlink" title="创建分类页并添加“type”属性"></a>创建分类页并添加“type”属性</h5><p>通过命令行或者终端定位到博客所在根目录，例如<strong>MySelfBlog/</strong> ,执行命令:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure></p><p>创建分类页，成功后提示：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ***<span class="symbol">\M</span>ySelfBlog<span class="symbol">\s</span>ource<span class="symbol">\c</span>ategories<span class="symbol">\i</span>ndex.md</span><br></pre></td></tr></table></figure></p><p>根据上面的路径找到对应的<strong>index.md</strong> 文件，打开后默认内容应该是：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>如果我们希望分类页的标题显示为中文的分类，那么我们可以修改将<strong>title: categories</strong> 修改为<strong>title: 分类</strong>。<br>接着我们需要修改这个文件，最终为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>最后保存文件。</p><h5 id="给文章添加“categories”属性，划分类别"><a href="#给文章添加“categories”属性，划分类别" class="headerlink" title="给文章添加“categories”属性，划分类别"></a>给文章添加“categories”属性，划分类别</h5><p>将需要分类的文章添加categories属性。例如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo-next主题博客博文插入图片</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-24</span> <span class="number">22</span><span class="string">:22:31</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-next配置</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>这样这篇文章就归类为<strong>hexo-next配置</strong>类别了。<br><strong>注意：</strong><br>hexo规定一篇文章只能属于一个分类，如果categories下方出现两个属性（例如：<strong>hexo-next配置；图片插入</strong>），那么hexo不会将这篇文章归为两个分类，而是将分类嵌套，这篇文章将属于<strong>hexo-next配置</strong>下的<strong>图片插入</strong>分类。<br>这样我们就可以从分类页面上看到我们设置了的博文。效果如下:<br><img src="http://wx2.sinaimg.cn/large/006zoO1wgy1fxkdl006l8j30n00c4wfu.jpg" alt="分类"></p><h4 id="添加标签选项"><a href="#添加标签选项" class="headerlink" title="添加标签选项"></a>添加标签选项</h4><h5 id="创建标签页并添加“type”属性"><a href="#创建标签页并添加“type”属性" class="headerlink" title="创建标签页并添加“type”属性"></a>创建标签页并添加“type”属性</h5><p>通过命令行或者终端定位到博客所在根目录，例如<strong>MySelfBlog/</strong> ,执行命令:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure></p><p>创建分类页，成功后提示：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ***<span class="symbol">\M</span>ySelfBlog<span class="symbol">\s</span>ource<span class="symbol">\t</span>ags<span class="symbol">\i</span>ndex.md</span><br></pre></td></tr></table></figure></p><p>根据上面的路径找到对应的<strong>index.md</strong> 文件，打开后默认内容应该是：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>如果我们希望分类页的标题显示为中文的分类，那么我们可以修改将<strong>title: tags</strong> 修改为<strong>title: 标签</strong>。<br>接着我们需要修改这个文件，最终为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>最后保存文件。</p><h5 id="给文章添加“tags”属性，划分类别"><a href="#给文章添加“tags”属性，划分类别" class="headerlink" title="给文章添加“tags”属性，划分类别"></a>给文章添加“tags”属性，划分类别</h5><p>将需要分类的文章添加categories属性。例如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo-next主题博客博文插入图片</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-24</span> <span class="number">22</span><span class="string">:22:31</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo主题</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>这样这篇文章就有<strong>前端</strong>和<strong>hexo主题</strong>两个标签了。<br>效果如下:<br><img src="http://wx2.sinaimg.cn/large/006zoO1wgy1fxkdtj9nqzj30nm0cl75s.jpg" alt="标签"></p><h4 id="设置创建博文时自动添加分类以及标签选项"><a href="#设置创建博文时自动添加分类以及标签选项" class="headerlink" title="设置创建博文时自动添加分类以及标签选项"></a>设置创建博文时自动添加分类以及标签选项</h4><p>hexo主题创建博文时默认是没有分类以及标签选项的，所以我们如果要给文章添加分类和标签属性的时候，可能会需要先创建一篇博文，然后去博文的<strong>md</strong>文件中自己添加这两个属性，这样比较麻烦。所以呢，我们可以通过设置默认的文章模版内容来简化这个操作。</p><h5 id="修改post-md文件"><a href="#修改post-md文件" class="headerlink" title="修改post.md文件"></a>修改post.md文件</h5><p>我们打开<strong>MySelfBlog/scaffolds/post.md</strong>文件（文章模版文件），修改成：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>保存文件后，我们以后创建新文章的时候，页面里就会自动生成<strong>分类</strong>和<strong>标签</strong>项了，我们只需要写入对应的类别和标签就OK了，当然你也可以在这个模版页面自己添加一些自己的需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;添加分类选项&quot;&gt;&lt;a href=&quot;#添加分类选项&quot; class=&quot;headerlink&quot; title=&quot;添加分类选项&quot;&gt;&lt;/a&gt;添加分类选项&lt;/h4&gt;&lt;h5 id=&quot;创建分类页并添加“type”属性&quot;&gt;&lt;a href=&quot;#创建分类页并添加“type”属性&quot; cla
      
    
    </summary>
    
      <category term="hexo-next配置" scheme="http://www.zikunfu.cn/categories/hexo-next%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="前端" scheme="http://www.zikunfu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo主题" scheme="http://www.zikunfu.cn/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-next主题博客自定义配置Fork me on github</title>
    <link href="http://www.zikunfu.cn/post/b2257057.html"/>
    <id>http://www.zikunfu.cn/post/b2257057.html</id>
    <published>2018-11-24T16:00:10.000Z</published>
    <updated>2018-11-25T04:42:13.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在左上角或右上角实现fork-me-on-github"><a href="#在左上角或右上角实现fork-me-on-github" class="headerlink" title="在左上角或右上角实现fork me on github"></a>在左上角或右上角实现fork me on github</h4><p>效果如下：<br><img src="http://wx4.sinaimg.cn/large/006zoO1wgy1fxjlnarnuyj311x02kdfy.jpg" alt="fork"><br>首先我们可以选择在<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>或<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a>选择一款你喜欢的挂饰，拷贝方框内的代码：<br><img src="http://wx2.sinaimg.cn/large/006zoO1wgy1fxjlse3by6j30hq05oq32.jpg" alt="github"><br>将复制的代码，添加到<strong>MySelfBlog/themes/next/layout/_layout.swig</strong> 文件中，添加位置在<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"headband"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>如图:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxjm02q53hj30tw0a0ace.jpg" alt="location"><br><strong>注意：</strong>要将自己<strong>github</strong> 的网址填写在对应位置:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"你的Github网址"</span> <span class="attribute">class</span>=<span class="string">"github-corner"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span> <span class="attribute">title</span>=<span class="string">"Follow me on GitHub"</span> <span class="attribute">aria-label</span>=<span class="string">"Follow me on GitHub"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>例如:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https://github.com/zikunfucc"</span> <span class="attribute">class</span>=<span class="string">"github-corner"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span> <span class="attribute">title</span>=<span class="string">"Follow me on GitHub"</span> <span class="attribute">aria-label</span>=<span class="string">"Follow me on GitHub"</span>&gt;</span><br></pre></td></tr></table></figure></p><h4 id="自定义挂饰的部分样式"><a href="#自定义挂饰的部分样式" class="headerlink" title="自定义挂饰的部分样式"></a>自定义挂饰的部分样式</h4><p>样式源码示例:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg <span class="attribute">width</span>=<span class="string">"80"</span> <span class="attribute">height</span>=<span class="string">"80"</span> <span class="attribute">viewBox</span>=<span class="string">"0 0 250 250"</span> <span class="attribute">style</span>=<span class="string">"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"</span> <span class="attribute">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>修改挂饰的大小:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">width</span>=<span class="string">"80"</span> <span class="built_in">height</span>=<span class="string">"80"</span></span><br></pre></td></tr></table></figure></p><p>修改挂饰的颜色:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=<span class="string">"fill:#222; color:#fff;</span></span><br></pre></td></tr></table></figure></p><p>修改挂饰的位置（左方或者右方）:<br><strong>左方:</strong><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p><strong>右方:</strong><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>在修改了挂饰的位置后，可能还相应的需要修改挂饰的旋转方向:<br><strong>头朝左方:</strong><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>:<span class="built_in">scale</span>(-<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><strong>头朝右方:</strong><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删去<span class="built_in">transform</span>:<span class="built_in">scale</span>(-<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>如果读者有什么其他样式的修改可以告诉我，我将不定期修改，让大家能获得一个更为完善的博客配置文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在左上角或右上角实现fork-me-on-github&quot;&gt;&lt;a href=&quot;#在左上角或右上角实现fork-me-on-github&quot; class=&quot;headerlink&quot; title=&quot;在左上角或右上角实现fork me on github&quot;&gt;&lt;/a&gt;在左上角或
      
    
    </summary>
    
      <category term="hexo-next配置" scheme="http://www.zikunfu.cn/categories/hexo-next%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="前端" scheme="http://www.zikunfu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo主题" scheme="http://www.zikunfu.cn/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-next主题博客博文插入图片</title>
    <link href="http://www.zikunfu.cn/post/ce47f76.html"/>
    <id>http://www.zikunfu.cn/post/ce47f76.html</id>
    <published>2018-11-24T14:22:31.000Z</published>
    <updated>2018-11-25T04:42:15.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="博文插入图片"><a href="#博文插入图片" class="headerlink" title="博文插入图片"></a>博文插入图片</h3><h4 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h4><p>将需要插入文章的图片上传到某个图床上,例如新浪微博图床，得到这张图片的外链，例如 <strong><a href="http://wx3.sinaimg.cn/large/006zoO1wgy1fxjjq11udrj30go0aewfn.jpg" target="_blank" rel="noopener">外链示例</a></strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>wx3.sinaimg.cn<span class="regexp">/large/</span><span class="number">006</span>zoO1wgy1fxjjq11udrj30go0aewfn.jpg</span><br></pre></td></tr></table></figure></p><p>然后我们将这个保存了的外链实例,以markdown编辑语法写入博文中:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片标题</span>](<span class="link">外链</span>)</span><br></pre></td></tr></table></figure></p><p>就可以得到最终效果。<br><img src="http://wx3.sinaimg.cn/large/006zoO1wgy1fxjjq11udrj30go0aewfn.jpg" alt="外链示例"></p><h4 id="内部引用（本地导入）"><a href="#内部引用（本地导入）" class="headerlink" title="内部引用（本地导入）"></a>内部引用（本地导入）</h4><h5 id="方法一（安装相关插件）："><a href="#方法一（安装相关插件）：" class="headerlink" title="方法一（安装相关插件）："></a>方法一（安装相关插件）：</h5><h6 id="修改博客配置文件参数"><a href="#修改博客配置文件参数" class="headerlink" title="修改博客配置文件参数"></a>修改博客配置文件参数</h6><p>在<strong>MySelfBlog/_config.yml</strong>文件中使用Ctrl+F查找<strong>post_asset_folder</strong>参数，如果显示的是<strong>post_asset_folder: false</strong>,那么我们就修改为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样设置后，当你创建新博文时，Hexo会自动创建一个与博文同名且带上日期的文件夹，我们需要将该文章的所有资源（图片）全部放到那个文件夹里，这样我们就可以很方便的利用这些资源。  </p><h6 id="下载使用插件"><a href="#下载使用插件" class="headerlink" title="下载使用插件"></a>下载使用插件</h6><p>在博客根目录下通过命令行（终端），例如MySelfBlog目录，执行<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure></p><h6 id="正确引用方式"><a href="#正确引用方式" class="headerlink" title="正确引用方式"></a>正确引用方式</h6><p>在我们的博文中，如果你的博客已经是Hexo3以上版本的话，那么不能使用一般的<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片标题</span>](<span class="link">内部路径</span>)</span><br></pre></td></tr></table></figure></p><p>这样的markdown语法来引用图片和其他资源，这样可能会导致显示不正确，如下：<br><img src="/post/内部路径" alt="图片标题"><br>所以正确的引用方法应该是：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> asset_img 你的图片.jpg 图片标题 <span class="meta">%</span>｝</span><br></pre></td></tr></table></figure></p><p>展示效果:<br><img src="/post/ce47f76/星辰大海.jpg" title="星辰大海"></p><h5 id="方法二-本地创建文件夹"><a href="#方法二-本地创建文件夹" class="headerlink" title="方法二(本地创建文件夹)"></a>方法二(本地创建文件夹)</h5><p>在<strong>MySelfBlog/source</strong> 文件夹下创建一个<strong>images</strong> 文件夹，将你需要放置的图片放置在该文件夹下，然后调用<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">星辰大海</span>](<span class="link">/images/星辰大海.jpg</span>)</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/images/星辰大海.jpg" alt="标题"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;博文插入图片&quot;&gt;&lt;a href=&quot;#博文插入图片&quot; class=&quot;headerlink&quot; title=&quot;博文插入图片&quot;&gt;&lt;/a&gt;博文插入图片&lt;/h3&gt;&lt;h4 id=&quot;外部引用&quot;&gt;&lt;a href=&quot;#外部引用&quot; class=&quot;headerlink&quot; title=&quot;外
      
    
    </summary>
    
      <category term="hexo-next配置" scheme="http://www.zikunfu.cn/categories/hexo-next%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="前端" scheme="http://www.zikunfu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo主题" scheme="http://www.zikunfu.cn/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-next主题博客背景修改</title>
    <link href="http://www.zikunfu.cn/post/9bf7a4e1.html"/>
    <id>http://www.zikunfu.cn/post/9bf7a4e1.html</id>
    <published>2018-11-24T11:33:17.000Z</published>
    <updated>2018-11-25T04:42:14.729Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h4><p>博客路径<strong>MySelfBlog/themes/next/source/css/_custom/custom.styl</strong>找到对应的custom.styl文件，修改添加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(/images/bg1.png);</span><br><span class="line">    <span class="attribute">background-size</span>:cover;</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>url括号中的 <strong>(/images/bg.jpg)</strong> 对应着你所需要放置的背景图片，路径形式是相对于 <strong>themes/next/source</strong> 为根目录的路径，例如我的背景图片放置在 <strong>themes/next/source/images/bg1.png</strong> ,那么我对应的就是上面的路径，根据你们自己的路径填写正确即可。</p><h4 id="其他区域相应修改-不一定需要，看个人"><a href="#其他区域相应修改-不一定需要，看个人" class="headerlink" title="其他区域相应修改(不一定需要，看个人)"></a>其他区域相应修改(不一定需要，看个人)</h4><p>以上修改成功后，可能发现就像下面这样<br><img src="/post/9bf7a4e1/background1.png" title="丑陋的博客"><br>那么这个时候我们肯定是不能忍受的，那么我的选择是将文章板块，以及下方的评论系统的背景色调修改成原先的白色底色，这样才能获得一个单独修改背景图片的博客页面。修改的部分在我们原先的路径,<strong>themes/next/source/css/_custom/custom.styl</strong>处修改为：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">1200px</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加背景图</span></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>:url(/images/bg1.png);</span><br><span class="line">      <span class="attribute">background-size</span>:cover;</span><br><span class="line">      <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">      <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">      <span class="attribute">background-position</span>:center;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 修改文章的背景色和透明度</span></span><br><span class="line">  <span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 修改评论系统的背景色和透明度</span></span><br><span class="line">  <span class="selector-class">.comments</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p> 这样修改完了，我们就能看到博客页面成功的恢复成了我们所期望的样子，如下:<br> <img src="/post/9bf7a4e1/background2.png" title="美化的博客"><br> 如果读者发现自己的博客修改后还有部分板块颜色被背景色同化，那么可以自己F12或者在那个板块下审查元素，寻找对应板块的名称，自己去在custom.styl文件中设置该区域的背景色。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;添加背景图&quot;&gt;&lt;a href=&quot;#添加背景图&quot; class=&quot;headerlink&quot; title=&quot;添加背景图&quot;&gt;&lt;/a&gt;添加背景图&lt;/h4&gt;&lt;p&gt;博客路径&lt;strong&gt;MySelfBlog/themes/next/source/css/_custom/cust
      
    
    </summary>
    
      <category term="hexo-next配置" scheme="http://www.zikunfu.cn/categories/hexo-next%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="前端" scheme="http://www.zikunfu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo主题" scheme="http://www.zikunfu.cn/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.zikunfu.cn/post/4a17b156.html"/>
    <id>http://www.zikunfu.cn/post/4a17b156.html</id>
    <published>2018-11-16T04:09:29.161Z</published>
    <updated>2018-11-24T05:36:37.808Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
