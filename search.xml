<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MongoDB最新安装详解与诸多问题处理</title>
      <link href="/post/956c615f.html"/>
      <url>/post/956c615f.html</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB安装过程"><a href="#MongoDB安装过程" class="headerlink" title="MongoDB安装过程:"></a>MongoDB安装过程:</h4><h5 id="源程序的下载"><a href="#源程序的下载" class="headerlink" title="源程序的下载:"></a>源程序的下载:</h5><p><strong>官网下载地址</strong>:<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">点此转入下载页面</a><br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0r5htyb5j30v10dkmxt.jpg" alt="样例"><br>根据你的系统下载 32 位或 64 位的<strong> .msi</strong> 文件(或者也可以下载ZIP压缩包),版本(version)安全起见选（current version），不要选最新的，操作系统按照自己的版本选，Package选MSI（ZIP也可以，不过没必要），下载后双击该文件，按操作提示安装即可。</p><h5 id="程序安装流程"><a href="#程序安装流程" class="headerlink" title="程序安装流程:"></a>程序安装流程:</h5><p>启动安装程序后，一路<strong>Next</strong>，直到如图位置:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0r5ia74ij30dv0asq3e.jpg" alt=""><br>我们选择Custom自定义安装。<br>接着就到了:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0r5ipyy1j30dv0as74y.jpg" alt=""><br>这里我们选择自定义安装目录，接着Next。<br>又到了：<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0r5k0vx1j30dv0asq3g.jpg" alt=""><br>这个位置的两个目录最好不要改动，否则可能会出现蜜汁问题，所以No-Zuo-No-Die,乖乖的<strong>Next</strong>。<br><strong>注意：</strong><br>这里很关键，要取消勾选，我们选择不安装图形化界面，否则可能会安装很久很久很久……（网上有人安装了好久好久，最后只好Kill了进程，重新安装）<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0rpxagwqj30dv0as74p.jpg" alt=""><br><strong>注意:</strong><br>中间安装可能会出现问题,问题如下:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0srban1lj30aw060aa5.jpg" alt=""><br>解决方法就是选择<strong>Ignore</strong>,直接忽略这个问题，我们放到后面去处理服务的问题。如果你是个很有毅力的boy or girl，可以选择<strong>Retry</strong>，那么结果不出意外的话，还是会出现这个弹窗，然后重复以上……直到你放弃治疗，<strong>Ignore</strong>。  </p><p>最后，恶心的安装流程就结束了。<br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fy0r5je59rj30dv0asaae.jpg" alt=""><br>安装完了之后，大概的目录文件如图:<br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fy0rur37d6j30gs07zdg9.jpg" alt=""></p><h5 id="MongoDB配置启动"><a href="#MongoDB配置启动" class="headerlink" title="MongoDB配置启动"></a>MongoDB配置启动</h5><p><strong>MongoDB</strong>将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它(具体意思看不懂也无所谓，按着做就行)。<br>例如:<br>我们之前MongoDB安装在了<strong>D:\mongodb</strong>目录下;<br>我们进入到该目录下的<strong>data目录</strong>中,即<strong>D:\mongodb\data</strong>，应该是空的;<br>我们在这个目录下创建一个<strong>db文件夹</strong>,即<strong>D:\mongodb\data\db</strong>;</p><p><strong>注意:</strong><br><strong>db文件夹</strong>作为安装目录\data\的备用目录，启动时，使用的是安装目录例如:<strong>D:\mongodb\bin\下的mongod.exe</strong>，如果直接启动，实际使用的是<strong>C:\data\db\</strong> 为数据库文件存储目录，需要确保该目录存在。</p><p>可以使用<strong>–dbpath “安装目录\data\db”</strong> 显式指定该目录为存储位置，来启动MongoDB，如：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="symbol">\m</span>ongodb<span class="symbol">\b</span>in&gt;mongod.exe --dbpath "D:<span class="symbol">\m</span>ongodb<span class="symbol">\d</span>ata<span class="symbol">\d</span>b"</span><br></pre></td></tr></table></figure></p><p>启动成功，效果如下:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0sjpqpuhj30nj07twev.jpg" alt=""><br>说明此时MongoDB已经开启，浏览器访问 <a href="http://localhost:27017/" target="_blank" rel="noopener">本地27017端口页面</a>，页面上输出：<br>It looks like you are trying to access MongoDB over HTTP on the native driver port.<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0spx7boaj30q806ewf1.jpg" alt=""><br>说明MongoDB已经启动了，且它的默认端口(27017)没有被占用。<br>然后，我们要再打开一个CMD命令行（千万别关闭之前那个CMD，否则MongoDB服务就停了），CD到bin目录下(例如:D:\mongodb\bin),输入:mongo(或者mongo.exe)，启动mongoDB的操作终端,如下:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0t4o4d0hj30ub0e3q5b.jpg" alt=""><br><strong>简单实验:</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure></p><h5 id="MongoDB配置服务"><a href="#MongoDB配置服务" class="headerlink" title="MongoDB配置服务"></a>MongoDB配置服务</h5><p>打开任务管理器，检查本地MongoDB服务，因为我们在安装时勾选了，所以按理来说是有这个服务的，从services.msc里可以看到：<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0t8lyippj30ms0goq4w.jpg" alt=""><br>或者在任务管理器上，类似于这样:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0tciuo60j30q8072gm3.jpg" alt=""><br><strong>注意:</strong><br>但是这里有可能有点不同，可能你的MongoDB服务是关闭的，而且启动不了这项服务,并且出现下面这样的响应:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0tex1473j30ey066aan.jpg" alt=""><br><strong>解决方案:</strong><br>使用管理员身份打开CMD，然后删除安装时默认创建的MongoDB服务(注意这里的服务名要换成你本机的,如果你的服务名不同的话)。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc <span class="keyword">delete</span> MongoDB</span><br></pre></td></tr></table></figure></p><p>然后我们使用下面这一行命令重新创建MongoDB服务:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\mongodb\bin\mongod.exe <span class="params">--dbpath</span> <span class="string">"D:\mongodb\data"</span> <span class="params">--logpath</span> <span class="string">"D:\mongodb\log\db.log"</span> <span class="params">--install</span> <span class="params">--serviceName</span> <span class="string">"mongo"</span> <span class="params">--logappend</span> <span class="params">--directoryperdb</span></span><br></pre></td></tr></table></figure></p><p>创建成功之后可以在任务管理器或者服务界面(services.msc)看到MongoDB的服务(mongo)，然后选中，右键启动就可以了，启动后如下:</p><p><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0tmbsf32j30i100owea.jpg" alt=""></p><p>当然你也可以使用命令启动服务,这里的服务名换成你自己设置的服务名:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mongo</span><br></pre></td></tr></table></figure></p><p>另外，建议将MongoDB的bin目录的路径添加的系统的环境变量中去，方便在命令行打开查看mongodb数据库。否则我们启动的时候，每次都需要CD到<strong>bin目录</strong>，运行mongo.exe，所以我们可以通过添加环境变量的方法来简化操作。<br>设置环境变量:<br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fy0uryht21j30h5096dg8.jpg" alt=""><br>添加你的<strong>bin目录:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fy0v913a5wj30el0flwf3.jpg" alt=""><br>之后就可以在MongoDB服务开启的状态下，直接CMD通过mongo命令启动MongoDB了,不需要CD到bin目录，再开启mongo。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fy0t4o4d0hj30ub0e3q5b.jpg" alt=""><br>是不是很方便呢?<br><strong>注意:</strong><br>其中也有可能出现这个问题:<br><strong>报错“拒绝访问”:</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2016-11-01T20:52:21.647+0800 I CONTROL [main] Trying <span class="keyword">to</span> install Windows<span class="built_in"> service </span>‘MongoDB'</span><br><span class="line"></span><br><span class="line">2016-11-01T20:52:21.648+0800 I CONTROL [main] <span class="builtin-name">Error</span> connecting <span class="keyword">to</span> the<span class="built_in"> Service </span>Control Manager: 拒绝访问。</span><br></pre></td></tr></table></figure></p><p><strong>原因：</strong>未使用管理员身份运行CMD<br><strong>解决方案:</strong> 找到命令处理程序C:\Windows\System32\cmd.exe右键以管理员身份运行。</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA-输出数组元素的方法汇总</title>
      <link href="/post/933a9886.html"/>
      <url>/post/933a9886.html</url>
      
        <content type="html"><![CDATA[<h3 id="输出数组元素"><a href="#输出数组元素" class="headerlink" title="输出数组元素:"></a>输出数组元素:</h3><p>一般来说，我们可以通过for循环遍历元素输出所有元素，但是在<strong>java</strong>中我们有更多的方法来达到我们的目的。比如说封装的<strong>Arrays类</strong>就可以很好的帮助我们处理数组的输出问题,也可以通过for-each来缩短代码量,甚至我们可以选择通过Java的泛型来自己写一个适合大多数数据对象的输出函数。总的来说，归纳有以下几种方法:</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组:"></a>一维数组:</h4><h5 id="定义变量："><a href="#定义变量：" class="headerlink" title="定义变量："></a>定义变量：</h5><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int[] array1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">char[] array2 = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br><span class="line"><span class="symbol">Integer</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="symbol">Character</span>[] charArray = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br></pre></td></tr></table></figure><h5 id="1-for循环"><a href="#1-for循环" class="headerlink" title="(1)for循环"></a>(1)for循环</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array1.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">            System.out.print(array1[<span class="built_in">i</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array2.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">   System.out.print(array2[<span class="built_in">i</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxpoc23j305w02bdfm.jpg" alt="第一种"></p><h5 id="2-for-each循环"><a href="#2-for-each循环" class="headerlink" title="(2)for-each循环"></a>(2)for-each循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : array1) &#123;</span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> i : array2) &#123;</span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxq4whqj3065029wea.jpg" alt="第二种"></p><h5 id="3-利用Arrays类的toString方法"><a href="#3-利用Arrays类的toString方法" class="headerlink" title="(3)利用Arrays类的toString方法"></a>(3)利用Arrays类的toString方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(array1));</span><br><span class="line">System.out.println(Arrays.toString(array2));</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxqgkbaj309e02aweb.jpg" alt="第三种"></p><h5 id="4-利用泛型自己写一个输出函数"><a href="#4-利用泛型自己写一个输出函数" class="headerlink" title="(4)利用泛型自己写一个输出函数"></a>(4)利用泛型自己写一个输出函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">printArray(intArray); <span class="comment">// 输出函数</span></span><br><span class="line">printArray(charArray);<span class="comment">// 输出函数</span></span><br><span class="line"><span class="comment">// 以下为自定义输出函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(E element : inputArray) &#123;</span><br><span class="line">System.out.printf(<span class="string">"%s "</span>, element);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxqwun3j309v02b0sk.jpg" alt="第四种"></p><h4 id="二维数组-多维数组"><a href="#二维数组-多维数组" class="headerlink" title="二维数组(多维数组):"></a>二维数组(多维数组):</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量:"></a>定义变量:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array3 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span>[][] array4 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br><span class="line">Integer[][] intArray2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">Character[][] charArray2 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h5 id="1-for循环-1"><a href="#1-for循环-1" class="headerlink" title="(1)for循环"></a>(1)for循环</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"第一种方法(for循环):"</span>);</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array3.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">j</span>  = <span class="number">0</span>; <span class="built_in">j</span> &lt; array3[<span class="built_in">i</span>].<span class="built_in">length</span>; <span class="built_in">j</span>++)&#123;</span><br><span class="line">System.out.print(array3[<span class="built_in">i</span>][<span class="built_in">j</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; array4.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">j</span>  = <span class="number">0</span>; <span class="built_in">j</span> &lt; array4[<span class="built_in">i</span>].<span class="built_in">length</span>; <span class="built_in">j</span>++)&#123;</span><br><span class="line">System.out.print(array4[<span class="built_in">i</span>][<span class="built_in">j</span>] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxrglakj305b03nmwy.jpg" alt="第一种"></p><h5 id="2-for-each循环-1"><a href="#2-for-each循环-1" class="headerlink" title="(2)for-each循环"></a>(2)for-each循环</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int[] i : <span class="type">array3</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(int j  : <span class="type">i</span>)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(char[] i : <span class="type">array4</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(char j : <span class="type">i</span>)&#123;</span><br><span class="line">System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxyaxrtqz5j306f03ja9v.jpg" alt="第二种"></p><h5 id="3-利用Arrays类的deepToString方法"><a href="#3-利用Arrays类的deepToString方法" class="headerlink" title="(3)利用Arrays类的deepToString方法"></a>(3)利用Arrays类的deepToString方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(array3));</span><br><span class="line">System.out.println(Arrays.deepToString(array4));</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxs9tqxj30aa02bwec.jpg" alt="第三种"></p><h5 id="4-利用泛型自己写一个输出函数-1"><a href="#4-利用泛型自己写一个输出函数-1" class="headerlink" title="(4)利用泛型自己写一个输出函数"></a>(4)利用泛型自己写一个输出函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">printArray2(intArray2);<span class="comment">// 输出函数</span></span><br><span class="line">printArray2(charArray2); <span class="comment">// 输出函数</span></span><br><span class="line"><span class="comment">// 以下为自定义输出函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray2</span><span class="params">(E[][] inputArray)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(E[] element1 : inputArray)&#123;</span><br><span class="line"><span class="keyword">for</span>(E element2 : element1)&#123;</span><br><span class="line">System.out.printf(<span class="string">"%s "</span>, element2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果截图:</strong><br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxsmlirj309j03ojr8.jpg" alt="第四种"></p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码:"></a>测试代码:</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">out_array</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span>[] array1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] array2 = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] array3 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">char</span>[][] array4 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br><span class="line">        Integer[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        Character[] charArray = &#123;<span class="string">'你'</span>, <span class="string">'我'</span>, <span class="string">'他'</span>&#125;;</span><br><span class="line">        Integer[][] intArray2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line">        Character[][] charArray2 = &#123;&#123;<span class="string">'你'</span>, <span class="string">'我'</span>&#125;, &#123;<span class="string">'他'</span>, <span class="string">'她'</span>&#125;&#125;;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"一维数组输出:"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第一种方法(for循环):"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(array1[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(array2[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第二种方法(for-each循环)"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array1) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : array2) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第三种方法(利用Arrays类的toString方法):"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(array1));</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(array2));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第四种方法(利用泛型自己写一个输出函数):"</span>);</span><br><span class="line">        printArray(intArray);</span><br><span class="line">        printArray(charArray);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"二维数组输出方法:"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第一种方法(for循环):"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array3.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j  = <span class="number">0</span>; j &lt; array3[i].length; j++)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(array3[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array4.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j  = <span class="number">0</span>; j &lt; array4[i].length; j++)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(array4[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第二种方法(for-each循环:"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] i : array3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j  : i)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span>[] i : array4)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> j : i)&#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第三种方法(利用Arrays类的deepToString方法):"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.deepToString(array3));</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.deepToString(array4));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"第四种方法(利用泛型自己写一个输出函数):"</span>);</span><br><span class="line">        printArray2(intArray2);</span><br><span class="line">        printArray2(charArray2);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span>(<span class="params">E[] inputArray</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(E element : inputArray) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%s "</span>, element);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray2</span>(<span class="params">E[][] inputArray</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(E[] element1 : inputArray)&#123;</span><br><span class="line">                <span class="keyword">for</span>(E element2 : element1)&#123;</span><br><span class="line">                    System.<span class="keyword">out</span>.printf(<span class="string">"%s "</span>, element2);</span><br><span class="line">                &#125;</span><br><span class="line">                System.<span class="keyword">out</span>.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总体结果"><a href="#总体结果" class="headerlink" title="总体结果:"></a>总体结果:</h4><h5 id="一维数组-1"><a href="#一维数组-1" class="headerlink" title="一维数组:"></a>一维数组:</h5><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxyaxtgkb6j309z092mx8.jpg" alt="一维"></p><h5 id="二维数组（多维数组）"><a href="#二维数组（多维数组）" class="headerlink" title="二维数组（多维数组）:"></a>二维数组（多维数组）:</h5><p><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxyaxtudooj30ar0dn3yn.jpg" alt="二维"></p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA-codePoint和length的区别</title>
      <link href="/post/f442d1f1.html"/>
      <url>/post/f442d1f1.html</url>
      
        <content type="html"><![CDATA[<h4 id="原理差异"><a href="#原理差异" class="headerlink" title="原理差异:"></a>原理差异:</h4><p><strong>length()</strong> 方法返回的String字符串对应<strong>UTF-16编码</strong>需要的代码单元数量，但JAVA用的<strong>Unicode字符集</strong>并不能通过一个代码单元来代表所有的字符。对于大多数的常用Unicode字符可以仅需要<strong>一个</strong>代码单元就可以表示，但是对于一部分的特殊字符需要<strong>两个</strong>代码单元才能成功表示。  </p><p><strong>codePointCount()</strong> 方法，通过<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello world"</span>;</span><br><span class="line"><span class="built_in">int</span> strLength = <span class="built_in">str</span>.codePointCount(<span class="number">0</span>, <span class="built_in">str</span>.length()) <span class="comment">// 返回字符串长度</span></span><br></pre></td></tr></table></figure></p><p>方法的调用，我们可以得到码点数量，也就是实际意义上的字符串长度。  </p><p>所以通俗来讲，就是说<strong>length()</strong> 是实际上电脑中以<strong>UTF-16编码存储的字符个数</strong>。而<strong>codePointCount()</strong> 方法返回的是<strong>我们认为的字符串长度，是实际上的字符个数</strong>。  </p><h4 id="附带codePointCount-方法的解析"><a href="#附带codePointCount-方法的解析" class="headerlink" title="附带codePointCount()方法的解析:"></a>附带codePointCount()方法的解析:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">codePointCount</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"><span class="comment">// beginIndex-- 这是该在文本范围的第一个字符索引。</span></span></span><br><span class="line"><span class="function"><span class="comment">// endIndex-- 这是文本范围的最后一个字符之后的索引。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 相当于对于字符串String[beginIndex, endIndex-1]求解码点数量</span></span></span><br><span class="line"><span class="function"><span class="comment">// 也可以认为是对于[beginIndex, endIndex)左闭右开范围的字符数目</span></span></span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试:"></a>代码测试:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">codepoint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hello"</span>;</span><br><span class="line">        String str2 = <span class="string">"\uD835\uDD68"</span>;</span><br><span class="line">        <span class="keyword">int</span> n1 = str1.length();</span><br><span class="line">        <span class="keyword">int</span> n2 = str1.codePointCount(<span class="number">0</span>, n1);</span><br><span class="line">        <span class="keyword">int</span> n3 = str2.length();</span><br><span class="line">        <span class="keyword">int</span> n4 = str2.codePointCount(<span class="number">0</span>, n3);</span><br><span class="line">        System.out.println(<span class="string">"String1:"</span> + str1);</span><br><span class="line">        System.out.println(<span class="string">"String1.length() return:"</span> + n1);</span><br><span class="line">        System.out .println(<span class="string">"String1.Codepointcount() return:"</span> + n2);</span><br><span class="line">        System.out.println(<span class="string">"String2:"</span> + str2);</span><br><span class="line">        System.out.println(<span class="string">"String2.length() return:"</span> + n3);</span><br><span class="line">        System.out .println(<span class="string">"String2.Codepointcount() return:"</span> + n4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果:"></a>测试结果:</h4><p><img src="http://wx1.sinaimg.cn/mw690/006zoO1wly1fxvyzwrtozj308k05yt8o.jpg" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android开发(1)-输出字符并修改字体大小和颜色</title>
      <link href="/post/1792901c.html"/>
      <url>/post/1792901c.html</url>
      
        <content type="html"><![CDATA[<h4 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a>实验要求：</h4><p>在Android Studio虚拟机的屏幕上输出学号和中英文名。</p><h4 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h4><h5 id="赋值给控件文本内容"><a href="#赋值给控件文本内容" class="headerlink" title="赋值给控件文本内容"></a>赋值给控件文本内容</h5><h6 id="粗暴方法："><a href="#粗暴方法：" class="headerlink" title="粗暴方法："></a>粗暴方法：</h6><p>定位到<strong>activity_main.xml</strong>文件下，修改<strong>android:text属性为16121198-符子坤-zikunfu</strong>，但是呢，我们会发现出现了一定的问题，如图，我们获得了一个警告，这个警告在这个情况下代表着我们可能是直接对控件内容进行了赋值。<br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxqeo3kekkj30fc01rq2x.jpg" alt="警告"></p><h6 id="可行方法"><a href="#可行方法" class="headerlink" title="可行方法:"></a>可行方法:</h6><p><strong>解决方案：</strong>在Android中建议引用全局变量，将我们所需要内容写在<strong>strings.xml</strong>文件内，通过以下方式进行赋值。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxqer41chdj308y02e743.jpg" alt="文件位置"><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxqesb2v23j30da03cdfr.jpg" alt="语法格式"><br>然后我们在<strong>activity_main.xml</strong>文件下,通过<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android: <span class="built_in">text</span>=<span class="string">"@string/author_id_name"</span></span><br></pre></td></tr></table></figure></p><p>来实现对文本内容的赋值。<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxqevniw2mj30d50743yq.jpg" alt="语法"></p><h5 id="修改控件字体颜色"><a href="#修改控件字体颜色" class="headerlink" title="修改控件字体颜色"></a>修改控件字体颜色</h5><p>同样，我们也可以使用这种方法来对文本内容的颜色进行修改，在<strong>colors.xml</strong>文件下，添加对应的颜色变量，例如：<br><img src="http://wx1.sinaimg.cn/mw690/006zoO1wgy1fxqey8bajvj30aj04gdfv.jpg" alt="颜色"><br>我们选择了红色red，然后在<strong>activity_main.xml</strong>文件下使用<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">android:</span>textColor=<span class="string">"@color/red"</span></span><br></pre></td></tr></table></figure></p><p>来设置文本内容的字体颜色。<br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxqey8npq7j30d20770sy.jpg" alt="颜色"></p><h5 id="修改控件字体大小"><a href="#修改控件字体大小" class="headerlink" title="修改控件字体大小"></a>修改控件字体大小</h5><p>后面呢，我们可以对字体的大小也进行修改，这里我们设置为<strong>30sp（按照官方文档最好使用sp）</strong>。<br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxqey933boj30b10640sw.jpg" alt="大小"></p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果:"></a>实验结果:</h4><p>最后，我们<strong>Run “app”</strong>就可以在虚拟机上看到所需要的学号,中英文名字显示在屏幕的中央了。<br><img src="http://wx3.sinaimg.cn/small/006zoO1wgy1fxqf4dy8gvj30u01hc3zo.jpg" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-next主题博客自定义设置标签页面的标签样式</title>
      <link href="/post/1ca6df66.html"/>
      <url>/post/1ca6df66.html</url>
      
        <content type="html"><![CDATA[<h5 id="修改标签样式"><a href="#修改标签样式" class="headerlink" title="修改标签样式"></a>修改标签样式</h5><p>一直感觉标签页的这个标签样式非常难看，又小又灰，换了背景图之后显得连看都看不清楚了，所以我就打算去自己修改一下这个样式，让他变的和谐起来。不过呢，在这个修改的过程中发现了这个东东竟然修改起来很麻烦，它不是由一个<strong>class</strong>类别属性，分配到某一个预定义的类别上的，也就是说它不是外联样式（CSS外联样式表设定），而是内联样式决定其样式。如图：<br><strong>标签对应的样式：</strong><br><img src="http://wx4.sinaimg.cn/mw690/006zoO1wgy1fxkel6tub6j30gs06jq3i.jpg" alt="样式"><br>由于这些标签的样式都是内联样式，所以我们就无法通过自定义样式表来修改这些标签的样式，因为<strong>内联样式的优先级是大于外联样式</strong>的，所以即使我们自定义样式，这些标签样式也不会被修改。那么我们为了修改这些标签的样式，只能去寻找这些标签的生成代码，然后在生成代码里修改样式。<br>我们审查元素，发现上级<strong>class</strong>是<strong>post-body</strong>,然后我们到<strong>页面生成文件page.swig</strong>中寻找，该文件位置<strong>MySelfBlog/themes/next/layout/page.swig</strong>,找到<strong>PAGE BODY</strong>代码块，很快就发现了我们的目标：<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxkew9m4i1j30q40b1gme.jpg" alt="代码"><br>找到了罪魁祸首，那么我们就只需要按自己的需要修改对应的参数就哦啦，我最终修改为：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="class"><span class="keyword">class</span>="<span class="title">tag</span>-<span class="title">cloud</span>-<span class="title">tags</span>"&gt;</span></span><br><span class="line"><span class="class">     </span>&#123;&#123; tagcloud(&#123;min_font: <span class="number">20</span>, max_font: <span class="number">30</span>, amount: <span class="number">300</span>, color: <span class="keyword">true</span>, start_color: <span class="string">'#555'</span>, end_color: <span class="string">'#111'</span>&#125;) &#125;&#125;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>效果对比：<br><strong>原样式：</strong><br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fxkegf7bk8j30d107eq39.jpg" alt="原样式"><br><strong>最终样式:</strong><br><img src="http://wx3.sinaimg.cn/mw690/006zoO1wgy1fxkf16jpx6j30hk09h750.jpg" alt="最终样式"><br>个人感觉还是好看了点，不是吗？0.0</p>]]></content>
      
      
      <categories>
          
          <category> hexo-next配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-next主题博客添加分类，标签页以及自定义样式</title>
      <link href="/post/a0fe0969.html"/>
      <url>/post/a0fe0969.html</url>
      
        <content type="html"><![CDATA[<h4 id="添加分类选项"><a href="#添加分类选项" class="headerlink" title="添加分类选项"></a>添加分类选项</h4><h5 id="创建分类页并添加“type”属性"><a href="#创建分类页并添加“type”属性" class="headerlink" title="创建分类页并添加“type”属性"></a>创建分类页并添加“type”属性</h5><p>通过命令行或者终端定位到博客所在根目录，例如<strong>MySelfBlog/</strong> ,执行命令:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure></p><p>创建分类页，成功后提示：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ***<span class="symbol">\M</span>ySelfBlog<span class="symbol">\s</span>ource<span class="symbol">\c</span>ategories<span class="symbol">\i</span>ndex.md</span><br></pre></td></tr></table></figure></p><p>根据上面的路径找到对应的<strong>index.md</strong> 文件，打开后默认内容应该是：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>如果我们希望分类页的标题显示为中文的分类，那么我们可以修改将<strong>title: categories</strong> 修改为<strong>title: 分类</strong>。<br>接着我们需要修改这个文件，最终为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>最后保存文件。</p><h5 id="给文章添加“categories”属性，划分类别"><a href="#给文章添加“categories”属性，划分类别" class="headerlink" title="给文章添加“categories”属性，划分类别"></a>给文章添加“categories”属性，划分类别</h5><p>将需要分类的文章添加categories属性。例如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo-next主题博客博文插入图片</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-24</span> <span class="number">22</span><span class="string">:22:31</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-next配置</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>这样这篇文章就归类为<strong>hexo-next配置</strong>类别了。<br><strong>注意：</strong><br>hexo规定一篇文章只能属于一个分类，如果categories下方出现两个属性（例如：<strong>hexo-next配置；图片插入</strong>），那么hexo不会将这篇文章归为两个分类，而是将分类嵌套，这篇文章将属于<strong>hexo-next配置</strong>下的<strong>图片插入</strong>分类。<br>这样我们就可以从分类页面上看到我们设置了的博文。效果如下:<br><img src="http://wx2.sinaimg.cn/large/006zoO1wgy1fxkdl006l8j30n00c4wfu.jpg" alt="分类"></p><h4 id="添加标签选项"><a href="#添加标签选项" class="headerlink" title="添加标签选项"></a>添加标签选项</h4><h5 id="创建标签页并添加“type”属性"><a href="#创建标签页并添加“type”属性" class="headerlink" title="创建标签页并添加“type”属性"></a>创建标签页并添加“type”属性</h5><p>通过命令行或者终端定位到博客所在根目录，例如<strong>MySelfBlog/</strong> ,执行命令:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure></p><p>创建分类页，成功后提示：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ***<span class="symbol">\M</span>ySelfBlog<span class="symbol">\s</span>ource<span class="symbol">\t</span>ags<span class="symbol">\i</span>ndex.md</span><br></pre></td></tr></table></figure></p><p>根据上面的路径找到对应的<strong>index.md</strong> 文件，打开后默认内容应该是：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>如果我们希望分类页的标题显示为中文的分类，那么我们可以修改将<strong>title: tags</strong> 修改为<strong>title: 标签</strong>。<br>接着我们需要修改这个文件，最终为：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-25</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>最后保存文件。</p><h5 id="给文章添加“tags”属性，划分类别"><a href="#给文章添加“tags”属性，划分类别" class="headerlink" title="给文章添加“tags”属性，划分类别"></a>给文章添加“tags”属性，划分类别</h5><p>将需要分类的文章添加categories属性。例如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo-next主题博客博文插入图片</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-11</span><span class="bullet">-24</span> <span class="number">22</span><span class="string">:22:31</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo主题</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>这样这篇文章就有<strong>前端</strong>和<strong>hexo主题</strong>两个标签了。<br>效果如下:<br><img src="http://wx2.sinaimg.cn/large/006zoO1wgy1fxkdtj9nqzj30nm0cl75s.jpg" alt="标签"></p><h4 id="设置创建博文时自动添加分类以及标签选项"><a href="#设置创建博文时自动添加分类以及标签选项" class="headerlink" title="设置创建博文时自动添加分类以及标签选项"></a>设置创建博文时自动添加分类以及标签选项</h4><p>hexo主题创建博文时默认是没有分类以及标签选项的，所以我们如果要给文章添加分类和标签属性的时候，可能会需要先创建一篇博文，然后去博文的<strong>md</strong>文件中自己添加这两个属性，这样比较麻烦。所以呢，我们可以通过设置默认的文章模版内容来简化这个操作。</p><h5 id="修改post-md文件"><a href="#修改post-md文件" class="headerlink" title="修改post.md文件"></a>修改post.md文件</h5><p>我们打开<strong>MySelfBlog/scaffolds/post.md</strong>文件（文章模版文件），修改成：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>保存文件后，我们以后创建新文章的时候，页面里就会自动生成<strong>分类</strong>和<strong>标签</strong>项了，我们只需要写入对应的类别和标签就OK了，当然你也可以在这个模版页面自己添加一些自己的需求。</p>]]></content>
      
      
      <categories>
          
          <category> hexo-next配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-next主题博客自定义配置Fork me on github</title>
      <link href="/post/b2257057.html"/>
      <url>/post/b2257057.html</url>
      
        <content type="html"><![CDATA[<h4 id="在左上角或右上角实现fork-me-on-github"><a href="#在左上角或右上角实现fork-me-on-github" class="headerlink" title="在左上角或右上角实现fork me on github"></a>在左上角或右上角实现fork me on github</h4><p>效果如下：<br><img src="http://wx4.sinaimg.cn/large/006zoO1wgy1fxjlnarnuyj311x02kdfy.jpg" alt="fork"><br>首先我们可以选择在<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>或<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a>选择一款你喜欢的挂饰，拷贝方框内的代码：<br><img src="http://wx2.sinaimg.cn/large/006zoO1wgy1fxjlse3by6j30hq05oq32.jpg" alt="github"><br>将复制的代码，添加到<strong>MySelfBlog/themes/next/layout/_layout.swig</strong> 文件中，添加位置在<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"headband"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>如图:<br><img src="http://wx2.sinaimg.cn/mw690/006zoO1wgy1fxjm02q53hj30tw0a0ace.jpg" alt="location"><br><strong>注意：</strong>要将自己<strong>github</strong> 的网址填写在对应位置:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"你的Github网址"</span> <span class="attribute">class</span>=<span class="string">"github-corner"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span> <span class="attribute">title</span>=<span class="string">"Follow me on GitHub"</span> <span class="attribute">aria-label</span>=<span class="string">"Follow me on GitHub"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>例如:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"https://github.com/zikunfucc"</span> <span class="attribute">class</span>=<span class="string">"github-corner"</span> <span class="attribute">target</span>=<span class="string">"_blank"</span> <span class="attribute">title</span>=<span class="string">"Follow me on GitHub"</span> <span class="attribute">aria-label</span>=<span class="string">"Follow me on GitHub"</span>&gt;</span><br></pre></td></tr></table></figure></p><h4 id="自定义挂饰的部分样式"><a href="#自定义挂饰的部分样式" class="headerlink" title="自定义挂饰的部分样式"></a>自定义挂饰的部分样式</h4><p>样式源码示例:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg <span class="attribute">width</span>=<span class="string">"80"</span> <span class="attribute">height</span>=<span class="string">"80"</span> <span class="attribute">viewBox</span>=<span class="string">"0 0 250 250"</span> <span class="attribute">style</span>=<span class="string">"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"</span> <span class="attribute">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>修改挂饰的大小:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">width</span>=<span class="string">"80"</span> <span class="built_in">height</span>=<span class="string">"80"</span></span><br></pre></td></tr></table></figure></p><p>修改挂饰的颜色:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style=<span class="string">"fill:#222; color:#fff;</span></span><br></pre></td></tr></table></figure></p><p>修改挂饰的位置（左方或者右方）:<br><strong>左方:</strong><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p><strong>右方:</strong><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>在修改了挂饰的位置后，可能还相应的需要修改挂饰的旋转方向:<br><strong>头朝左方:</strong><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>:<span class="built_in">scale</span>(-<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><strong>头朝右方:</strong><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删去<span class="built_in">transform</span>:<span class="built_in">scale</span>(-<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>如果读者有什么其他样式的修改可以告诉我，我将不定期修改，让大家能获得一个更为完善的博客配置文章。</p>]]></content>
      
      
      <categories>
          
          <category> hexo-next配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-next主题博客博文插入图片</title>
      <link href="/post/ce47f76.html"/>
      <url>/post/ce47f76.html</url>
      
        <content type="html"><![CDATA[<h3 id="博文插入图片"><a href="#博文插入图片" class="headerlink" title="博文插入图片"></a>博文插入图片</h3><h4 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h4><p>将需要插入文章的图片上传到某个图床上,例如新浪微博图床，得到这张图片的外链，例如 <strong><a href="http://wx3.sinaimg.cn/large/006zoO1wgy1fxjjq11udrj30go0aewfn.jpg" target="_blank" rel="noopener">外链示例</a></strong><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>wx3.sinaimg.cn<span class="regexp">/large/</span><span class="number">006</span>zoO1wgy1fxjjq11udrj30go0aewfn.jpg</span><br></pre></td></tr></table></figure></p><p>然后我们将这个保存了的外链实例,以markdown编辑语法写入博文中:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片标题</span>](<span class="link">外链</span>)</span><br></pre></td></tr></table></figure></p><p>就可以得到最终效果。<br><img src="http://wx3.sinaimg.cn/large/006zoO1wgy1fxjjq11udrj30go0aewfn.jpg" alt="外链示例"></p><h4 id="内部引用（本地导入）"><a href="#内部引用（本地导入）" class="headerlink" title="内部引用（本地导入）"></a>内部引用（本地导入）</h4><h5 id="方法一（安装相关插件）："><a href="#方法一（安装相关插件）：" class="headerlink" title="方法一（安装相关插件）："></a>方法一（安装相关插件）：</h5><h6 id="修改博客配置文件参数"><a href="#修改博客配置文件参数" class="headerlink" title="修改博客配置文件参数"></a>修改博客配置文件参数</h6><p>在<strong>MySelfBlog/_config.yml</strong>文件中使用Ctrl+F查找<strong>post_asset_folder</strong>参数，如果显示的是<strong>post_asset_folder: false</strong>,那么我们就修改为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样设置后，当你创建新博文时，Hexo会自动创建一个与博文同名且带上日期的文件夹，我们需要将该文章的所有资源（图片）全部放到那个文件夹里，这样我们就可以很方便的利用这些资源。  </p><h6 id="下载使用插件"><a href="#下载使用插件" class="headerlink" title="下载使用插件"></a>下载使用插件</h6><p>在博客根目录下通过命令行（终端），例如MySelfBlog目录，执行<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure></p><h6 id="正确引用方式"><a href="#正确引用方式" class="headerlink" title="正确引用方式"></a>正确引用方式</h6><p>在我们的博文中，如果你的博客已经是Hexo3以上版本的话，那么不能使用一般的<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片标题</span>](<span class="link">内部路径</span>)</span><br></pre></td></tr></table></figure></p><p>这样的markdown语法来引用图片和其他资源，这样可能会导致显示不正确，如下：<br><img src="/post/内部路径" alt="图片标题"><br>所以正确的引用方法应该是：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> asset_img 你的图片.jpg 图片标题 <span class="meta">%</span>｝</span><br></pre></td></tr></table></figure></p><p>展示效果:<br><img src="/post/ce47f76/星辰大海.jpg" title="星辰大海"></p><h5 id="方法二-本地创建文件夹"><a href="#方法二-本地创建文件夹" class="headerlink" title="方法二(本地创建文件夹)"></a>方法二(本地创建文件夹)</h5><p>在<strong>MySelfBlog/source</strong> 文件夹下创建一个<strong>images</strong> 文件夹，将你需要放置的图片放置在该文件夹下，然后调用<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">星辰大海</span>](<span class="link">/images/星辰大海.jpg</span>)</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/images/星辰大海.jpg" alt="标题"></p>]]></content>
      
      
      <categories>
          
          <category> hexo-next配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo-next主题博客背景修改</title>
      <link href="/post/9bf7a4e1.html"/>
      <url>/post/9bf7a4e1.html</url>
      
        <content type="html"><![CDATA[<h4 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h4><p>博客路径<strong>MySelfBlog/themes/next/source/css/_custom/custom.styl</strong>找到对应的custom.styl文件，修改添加<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(/images/bg1.png);</span><br><span class="line">    <span class="attribute">background-size</span>:cover;</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>url括号中的 <strong>(/images/bg.jpg)</strong> 对应着你所需要放置的背景图片，路径形式是相对于 <strong>themes/next/source</strong> 为根目录的路径，例如我的背景图片放置在 <strong>themes/next/source/images/bg1.png</strong> ,那么我对应的就是上面的路径，根据你们自己的路径填写正确即可。</p><h4 id="其他区域相应修改-不一定需要，看个人"><a href="#其他区域相应修改-不一定需要，看个人" class="headerlink" title="其他区域相应修改(不一定需要，看个人)"></a>其他区域相应修改(不一定需要，看个人)</h4><p>以上修改成功后，可能发现就像下面这样<br><img src="/post/9bf7a4e1/background1.png" title="丑陋的博客"><br>那么这个时候我们肯定是不能忍受的，那么我的选择是将文章板块，以及下方的评论系统的背景色调修改成原先的白色底色，这样才能获得一个单独修改背景图片的博客页面。修改的部分在我们原先的路径,<strong>themes/next/source/css/_custom/custom.styl</strong>处修改为：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">1200px</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加背景图</span></span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>:url(/images/bg1.png);</span><br><span class="line">      <span class="attribute">background-size</span>:cover;</span><br><span class="line">      <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">      <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">      <span class="attribute">background-position</span>:center;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 修改文章的背景色和透明度</span></span><br><span class="line">  <span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 修改评论系统的背景色和透明度</span></span><br><span class="line">  <span class="selector-class">.comments</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p> 这样修改完了，我们就能看到博客页面成功的恢复成了我们所期望的样子，如下:<br> <img src="/post/9bf7a4e1/background2.png" title="美化的博客"><br> 如果读者发现自己的博客修改后还有部分板块颜色被背景色同化，那么可以自己F12或者在那个板块下审查元素，寻找对应板块的名称，自己去在custom.styl文件中设置该区域的背景色。</p>]]></content>
      
      
      <categories>
          
          <category> hexo-next配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
